// <auto-generated />
using System;
using AwesomeCare.DataAccess.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AwesomeCare.DataAccess.Migrations
{
    [DbContext(typeof(AwesomeCareDbContext))]
    [Migration("20220920203527_tbl_staffrotaperiod_clockinoutaddress")]
    partial class tbl_staffrotaperiod_clockinoutaddress
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AwesomeCare.Model.Models.AdlObsOfficerToAct", b =>
                {
                    b.Property<int>("AdlObsOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AdlObsOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdlObsOfficerToActId"), 1L, 1);

                    b.Property<int>("ObservationId")
                        .HasColumnType("int")
                        .HasColumnName("ObservationId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("AdlObsOfficerToActId");

                    b.HasIndex("ObservationId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_AdlObs_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.AuditTrail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Duration")
                        .HasColumnType("datetime2")
                        .HasColumnName("Duration");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UserId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UserName");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_AuditTrail", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.Balance", b =>
                {
                    b.Property<int>("BalanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BalanceId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BalanceId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<int>("Mobility")
                        .HasColumnType("int")
                        .HasColumnName("Mobility");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("BalanceId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_Balance", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BaseRecordItemModel", b =>
                {
                    b.Property<int>("BaseRecordItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BaseRecordItemId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BaseRecordItemId"), 1L, 1);

                    b.Property<string>("AddLink")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AddLink");

                    b.Property<int>("BaseRecordId")
                        .HasColumnType("int")
                        .HasColumnName("BaseRecordId");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted");

                    b.Property<int>("ExpiryInMonths")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("ExpiryInMonths");

                    b.Property<bool>("HasGoogleForm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("HasGoogleForm");

                    b.Property<string>("ValueName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ValueName");

                    b.Property<string>("ViewLink")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ViewLink");

                    b.HasKey("BaseRecordItemId");

                    b.HasIndex("BaseRecordId");

                    b.ToTable("tbl_BaseRecordItem", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BaseRecordModel", b =>
                {
                    b.Property<int>("BaseRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BaseRecordId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BaseRecordId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Description");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("KeyName");

                    b.HasKey("BaseRecordId");

                    b.ToTable("tbl_BaseRecord", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BelieveTask", b =>
                {
                    b.Property<int>("BelieveTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BelieveTaskId"), 1L, 1);

                    b.Property<int>("BestId")
                        .HasColumnType("int")
                        .HasColumnName("BestId");

                    b.Property<int>("ReasonableBelieve")
                        .HasColumnType("int")
                        .HasColumnName("ReasonableBelieve");

                    b.HasKey("BelieveTaskId");

                    b.HasIndex("BestId");

                    b.ToTable("tbl_BelieveTask", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BestInterestAssessment", b =>
                {
                    b.Property<int>("BestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BestId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Position");

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Signature");

                    b.HasKey("BestId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_BestInterestAssessment", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BloodCoagOfficerToAct", b =>
                {
                    b.Property<int>("BloodCoagOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BloodCoagOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BloodCoagOfficerToActId"), 1L, 1);

                    b.Property<int>("BloodRecordId")
                        .HasColumnType("int")
                        .HasColumnName("BloodRecordId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("BloodCoagOfficerToActId");

                    b.HasIndex("BloodRecordId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_BloodCoag_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BloodCoagPhysician", b =>
                {
                    b.Property<int>("BloodCoagPhysicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BloodCoagPhysicianId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BloodCoagPhysicianId"), 1L, 1);

                    b.Property<int>("BloodRecordId")
                        .HasColumnType("int")
                        .HasColumnName("BloodRecordId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("BloodCoagPhysicianId");

                    b.HasIndex("BloodRecordId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_BloodCoag_Physician", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BloodCoagStaffName", b =>
                {
                    b.Property<int>("BloodCoagStaffNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BloodCoagStaffNameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BloodCoagStaffNameId"), 1L, 1);

                    b.Property<int>("BloodRecordId")
                        .HasColumnType("int")
                        .HasColumnName("BloodRecordId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("BloodCoagStaffNameId");

                    b.HasIndex("BloodRecordId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_BloodCoag_StaffName", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BloodPressureOfficerToAct", b =>
                {
                    b.Property<int>("BloodPressureOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BloodPressureOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BloodPressureOfficerToActId"), 1L, 1);

                    b.Property<int>("BloodPressureId")
                        .HasColumnType("int")
                        .HasColumnName("BloodPressureId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("BloodPressureOfficerToActId");

                    b.HasIndex("BloodPressureId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_BloodPressure_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BloodPressurePhysician", b =>
                {
                    b.Property<int>("BloodPressurePhysicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BloodPressurePhysicianId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BloodPressurePhysicianId"), 1L, 1);

                    b.Property<int>("BloodPressureId")
                        .HasColumnType("int")
                        .HasColumnName("BloodPressureId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("BloodPressurePhysicianId");

                    b.HasIndex("BloodPressureId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_BloodPressure_Physician", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BloodPressureStaffName", b =>
                {
                    b.Property<int>("BloodPressureStaffNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BloodPressureStaffNameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BloodPressureStaffNameId"), 1L, 1);

                    b.Property<int>("BloodPressureId")
                        .HasColumnType("int")
                        .HasColumnName("BloodPressureId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("BloodPressureStaffNameId");

                    b.HasIndex("BloodPressureId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_BloodPressure_StaffName", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BMIChartOfficerToAct", b =>
                {
                    b.Property<int>("BMIChartOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BMIChartOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BMIChartOfficerToActId"), 1L, 1);

                    b.Property<int>("BMIChartId")
                        .HasColumnType("int")
                        .HasColumnName("BMIChartId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("BMIChartOfficerToActId");

                    b.HasIndex("BMIChartId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_BMIChart_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BMIChartPhysician", b =>
                {
                    b.Property<int>("BMIChartPhysicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BMIChartPhysicianId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BMIChartPhysicianId"), 1L, 1);

                    b.Property<int>("BMIChartId")
                        .HasColumnType("int")
                        .HasColumnName("BMIChartId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("BMIChartPhysicianId");

                    b.HasIndex("BMIChartId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_BMIChart_Physician", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BMIChartStaffName", b =>
                {
                    b.Property<int>("BMIChartStaffNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BMIChartStaffNameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BMIChartStaffNameId"), 1L, 1);

                    b.Property<int>("BMIChartId")
                        .HasColumnType("int")
                        .HasColumnName("BMIChartId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("BMIChartStaffNameId");

                    b.HasIndex("BMIChartId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_BMIChart_StaffName", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BodyTempOfficerToAct", b =>
                {
                    b.Property<int>("BodyTempOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BodyTempOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BodyTempOfficerToActId"), 1L, 1);

                    b.Property<int>("BodyTempId")
                        .HasColumnType("int")
                        .HasColumnName("BodyTempId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("BodyTempOfficerToActId");

                    b.HasIndex("BodyTempId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_BodyTemp_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BodyTempPhysician", b =>
                {
                    b.Property<int>("BodyTempPhysicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BodyTempPhysicianId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BodyTempPhysicianId"), 1L, 1);

                    b.Property<int>("BodyTempId")
                        .HasColumnType("int")
                        .HasColumnName("BodyTempId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("BodyTempPhysicianId");

                    b.HasIndex("BodyTempId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_BodyTemp_Physician", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BodyTempStaffName", b =>
                {
                    b.Property<int>("BodyTempStaffNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BodyTempStaffNameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BodyTempStaffNameId"), 1L, 1);

                    b.Property<int>("BodyTempId")
                        .HasColumnType("int")
                        .HasColumnName("BodyTempId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("BodyTempStaffNameId");

                    b.HasIndex("BodyTempId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_BodyTemp_StaffName", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BowelMovementOfficerToAct", b =>
                {
                    b.Property<int>("BowelMovementOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BowelMovementOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BowelMovementOfficerToActId"), 1L, 1);

                    b.Property<int>("BowelMovementId")
                        .HasColumnType("int")
                        .HasColumnName("BowelMovementId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("BowelMovementOfficerToActId");

                    b.HasIndex("BowelMovementId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_BowelMovement_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BowelMovementPhysician", b =>
                {
                    b.Property<int>("BowelMovementPhysicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BowelMovementPhysicianId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BowelMovementPhysicianId"), 1L, 1);

                    b.Property<int>("BowelMovementId")
                        .HasColumnType("int")
                        .HasColumnName("BowelMovementId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("BowelMovementPhysicianId");

                    b.HasIndex("BowelMovementId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_BowelMovement_Physician", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BowelMovementStaffName", b =>
                {
                    b.Property<int>("BowelMovementStaffNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BowelMovementStaffNameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BowelMovementStaffNameId"), 1L, 1);

                    b.Property<int>("BowelMovementId")
                        .HasColumnType("int")
                        .HasColumnName("BowelMovementId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("BowelMovementStaffNameId");

                    b.HasIndex("BowelMovementId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_BowelMovement_StaffName", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.Capacity", b =>
                {
                    b.Property<int>("CapacityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CapacityId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CapacityId"), 1L, 1);

                    b.Property<string>("Implications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Implications");

                    b.Property<int>("PersonalDetailId")
                        .HasColumnType("int")
                        .HasColumnName("PersonalDetailId");

                    b.Property<int>("Pointer")
                        .HasColumnType("int")
                        .HasColumnName("Pointer");

                    b.HasKey("CapacityId");

                    b.HasIndex("PersonalDetailId")
                        .IsUnique();

                    b.ToTable("tbl_Capacity", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.CapacityIndicator", b =>
                {
                    b.Property<int>("CapacityIndicatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CapacityIndicatorId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CapacityIndicatorId"), 1L, 1);

                    b.Property<int>("BaseRecordId")
                        .HasColumnType("int")
                        .HasColumnName("BaseRecordId");

                    b.Property<int>("CapacityId")
                        .HasColumnType("int")
                        .HasColumnName("CapacityId");

                    b.HasKey("CapacityIndicatorId");

                    b.HasIndex("CapacityId");

                    b.ToTable("tbl_CapacityIndicator", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.CareIssuesTask", b =>
                {
                    b.Property<int>("CareIssuesTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CareIssuesTaskId"), 1L, 1);

                    b.Property<int>("BestId")
                        .HasColumnType("int")
                        .HasColumnName("BestId");

                    b.Property<int>("Issues")
                        .HasColumnType("int")
                        .HasColumnName("Issues");

                    b.HasKey("CareIssuesTaskId");

                    b.HasIndex("BestId");

                    b.ToTable("tbl_CareIssuesTask", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.CareObjPersonToAct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CareObjId")
                        .HasColumnType("int")
                        .HasColumnName("CareObjId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("Id");

                    b.HasIndex("CareObjId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_CareObjPersonToAct", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.CarePlanNutrition", b =>
                {
                    b.Property<int>("NutritionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NutritionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NutritionId"), 1L, 1);

                    b.Property<string>("AvoidFood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AvoidFood");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<string>("DrinkType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DrinkType");

                    b.Property<int>("EatingDifficulty")
                        .HasColumnType("int")
                        .HasColumnName("EatingDifficulty");

                    b.Property<int>("FoodIntake")
                        .HasColumnType("int")
                        .HasColumnName("FoodIntake");

                    b.Property<int>("FoodStorage")
                        .HasColumnType("int")
                        .HasColumnName("FoodStorage");

                    b.Property<int>("MealPreparation")
                        .HasColumnType("int")
                        .HasColumnName("MealPreparation");

                    b.Property<string>("RiskMitigations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RiskMitigations");

                    b.Property<string>("ServingMeal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ServingMeal");

                    b.Property<string>("SpecialDiet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SpecialDiet");

                    b.Property<int>("ThingsILike")
                        .HasColumnType("int")
                        .HasColumnName("ThingsILike");

                    b.Property<string>("WhenRestock")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WhenRestock");

                    b.Property<int>("WhoRestock")
                        .HasColumnType("int")
                        .HasColumnName("WhoRestock");

                    b.HasKey("NutritionId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_CarePlanNutrition", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.CareReview", b =>
                {
                    b.Property<int>("CareReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CareReviewId"), 1L, 1);

                    b.Property<int>("Action")
                        .HasColumnType("int")
                        .HasColumnName("Action");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Note");

                    b.HasKey("CareReviewId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_CareReview", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.Chat", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatId"), 1L, 1);

                    b.Property<DateTime>("Dated")
                        .HasColumnType("datetime2")
                        .HasColumnName("Dated");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Message");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int")
                        .HasColumnName("ReceiverId");

                    b.Property<int>("SenderId")
                        .HasColumnType("int")
                        .HasColumnName("SenderId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Type");

                    b.HasKey("ChatId");

                    b.ToTable("tbl_ClientChat", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"), 1L, 1);

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("About");

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Address");

                    b.Property<int>("Aid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("Aid");

                    b.Property<int>("AreaCodeId")
                        .HasColumnType("int")
                        .HasColumnName("AreaCodeId");

                    b.Property<int>("CapacityId")
                        .HasColumnType("int")
                        .HasColumnName("CapacityId");

                    b.Property<int>("ChoiceOfStaffId")
                        .HasColumnType("int")
                        .HasColumnName("ChoiceOfStaffId");

                    b.Property<int>("ClientManager")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("ClientManager");

                    b.Property<string>("DateOfBirth")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("DateOfBirth");

                    b.Property<int>("Denture")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("Denture");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Email");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDate");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Firstname");

                    b.Property<int>("GenderId")
                        .HasColumnType("int")
                        .HasColumnName("GenderId");

                    b.Property<string>("Hobbies")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Hobbies");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("IdNumber");

                    b.Property<string>("KeySafe")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("KeySafe");

                    b.Property<string>("Keyworker")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Keyworker");

                    b.Property<int>("KeyworkerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("KeyworkerId");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageId");

                    b.Property<string>("Latitude")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Latitude");

                    b.Property<double>("LocationDistance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.01)
                        .HasColumnName("LocationDistance");

                    b.Property<string>("Longitude")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Longitude");

                    b.Property<string>("Middlename")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Middlename");

                    b.Property<int>("NumberOfCalls")
                        .HasColumnType("int")
                        .HasColumnName("NumberOfCalls");

                    b.Property<int>("NumberOfStaff")
                        .HasColumnType("int")
                        .HasColumnName("NumberOfStaff");

                    b.Property<string>("PassportFilePath")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PassportFilePath");

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Pin");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PostCode");

                    b.Property<string>("PreferredName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PreferredName");

                    b.Property<string>("ProviderReference")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ProviderReference");

                    b.Property<string>("ProvisionVenue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ProvisionVenue");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Rate");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceId");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusId");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Surname");

                    b.Property<string>("TeamLeader")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TeamLeader");

                    b.Property<int>("TeamLeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("TeamLeaderId");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Telephone");

                    b.Property<int>("TeritoryId")
                        .HasColumnType("int")
                        .HasColumnName("TeritoryId");

                    b.Property<string>("UniqueId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UniqueId");

                    b.HasKey("ClientId");

                    b.HasIndex("IdNumber")
                        .IsUnique();

                    b.ToTable("tbl_Client", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientBloodCoagulationRecord", b =>
                {
                    b.Property<int>("BloodRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BloodRecordId"), 1L, 1);

                    b.Property<int>("BloodStatus")
                        .HasColumnType("int")
                        .HasColumnName("BloodStatus");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<int>("CurrentDose")
                        .HasColumnType("int")
                        .HasColumnName("CurrentDose");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<int>("INR")
                        .HasColumnType("int")
                        .HasColumnName("INR");

                    b.Property<int>("Indication")
                        .HasColumnType("int")
                        .HasColumnName("Indication");

                    b.Property<int>("NewDose")
                        .HasColumnType("int")
                        .HasColumnName("NewDose");

                    b.Property<int>("NewINR")
                        .HasColumnType("int")
                        .HasColumnName("NewINR");

                    b.Property<string>("PhysicianResponce")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhysicianResponce");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remark");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<int>("TargetINR")
                        .HasColumnType("int")
                        .HasColumnName("TargetINR");

                    b.Property<string>("TargetINRAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TargetINRAttach");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("Time");

                    b.HasKey("BloodRecordId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_Client_BloodCoagulationRecord", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientBloodPressure", b =>
                {
                    b.Property<int>("BloodPressureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BloodPressureId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<int>("GoalDiastolic")
                        .HasColumnType("int")
                        .HasColumnName("GoalDiastolic");

                    b.Property<int>("GoalSystolic")
                        .HasColumnType("int")
                        .HasColumnName("GoalSystolic");

                    b.Property<string>("PhysicianResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhysicianResponse");

                    b.Property<int>("ReadingDiastolic")
                        .HasColumnType("int")
                        .HasColumnName("ReadingDiastolic");

                    b.Property<int>("ReadingSystolic")
                        .HasColumnType("int")
                        .HasColumnName("ReadingSystolic");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("StatusAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StatusAttach");

                    b.Property<int>("StatusImage")
                        .HasColumnType("int")
                        .HasColumnName("StatusImage");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("Time");

                    b.HasKey("BloodPressureId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_Client_BloodPressure", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientBMIChart", b =>
                {
                    b.Property<int>("BMIChartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BMIChartId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<int>("Height")
                        .HasColumnType("int")
                        .HasColumnName("Height");

                    b.Property<int>("NumberRange")
                        .HasColumnType("int")
                        .HasColumnName("NumberRange");

                    b.Property<string>("PhysicianResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhysicianResponse");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("SeeChart")
                        .HasColumnType("int")
                        .HasColumnName("SeeChart");

                    b.Property<string>("SeeChartAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SeeChartAttach");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("Time");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Weight");

                    b.HasKey("BMIChartId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_Client_BMIChart", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientBodyTemp", b =>
                {
                    b.Property<int>("BodyTempId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BodyTempId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<string>("CurrentReading")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CurrentReading");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<string>("PhysicianResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhysicianResponse");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("SeeChart")
                        .HasColumnType("int")
                        .HasColumnName("SeeChart");

                    b.Property<string>("SeeChartAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SeeChartAttach");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<int>("TargetTemp")
                        .HasColumnType("int")
                        .HasColumnName("TargetTemp");

                    b.Property<string>("TargetTempAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TargetTempAttach");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("Time");

                    b.HasKey("BodyTempId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_Client_BodyTemp", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientBowelMovement", b =>
                {
                    b.Property<int>("BowelMovementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BowelMovementId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<int>("Color")
                        .HasColumnType("int")
                        .HasColumnName("Color");

                    b.Property<string>("ColorAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ColorAttach");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<string>("PhysicianResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhysicianResponse");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("Size")
                        .HasColumnType("int")
                        .HasColumnName("Size");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("StatusAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StatusAttach");

                    b.Property<int>("StatusImage")
                        .HasColumnType("int")
                        .HasColumnName("StatusImage");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("Time");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Type");

                    b.Property<string>("TypeAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TypeAttach");

                    b.HasKey("BowelMovementId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_Client_BowelMovement", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientCareDetails", b =>
                {
                    b.Property<int>("ClientCareDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientCareDetailsId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientCareDetailsId"), 1L, 1);

                    b.Property<int>("ClientCareDetailsTaskId")
                        .HasColumnType("int")
                        .HasColumnName("ClientCareDetailsTaskId");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Description");

                    b.Property<string>("Location")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Location");

                    b.Property<string>("Mitigation")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Mitigation");

                    b.Property<string>("Remark")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Remark");

                    b.Property<string>("Risk")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Risk");

                    b.HasKey("ClientCareDetailsId");

                    b.HasIndex("ClientCareDetailsTaskId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_ClientCareDetails", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientCareDetailsHeading", b =>
                {
                    b.Property<int>("ClientCareDetailsHeadingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientCareDetailsHeadingId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientCareDetailsHeadingId"), 1L, 1);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("Heading");

                    b.HasKey("ClientCareDetailsHeadingId");

                    b.HasIndex("Heading")
                        .IsUnique()
                        .HasDatabaseName("IX_tbl_ClientCareDetailsHeading_Heading");

                    b.ToTable("tbl_ClientCareDetailsHeading", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientCareDetailsTask", b =>
                {
                    b.Property<int>("ClientCareDetailsTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientCareDetailsTaskId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientCareDetailsTaskId"), 1L, 1);

                    b.Property<int>("ClientCareDetailsHeadingId")
                        .HasColumnType("int")
                        .HasColumnName("ClientCareDetailsHeadingId");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Deleted");

                    b.Property<string>("Task")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("Task");

                    b.HasKey("ClientCareDetailsTaskId");

                    b.HasIndex("ClientCareDetailsHeadingId");

                    b.ToTable("tbl_ClientCareDetailsTask", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientCareObj", b =>
                {
                    b.Property<int>("CareObjId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CareObjId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Note");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remark");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("CareObjId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_ClientCareObj", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientCleaning", b =>
                {
                    b.Property<int>("CleaningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CleaningId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CleaningId"), 1L, 1);

                    b.Property<int>("AreasAndItems")
                        .HasColumnType("int")
                        .HasColumnName("AreasAndItems");

                    b.Property<DateTime>("DATEFROM")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATEFROM");

                    b.Property<DateTime>("DATETO")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATETO");

                    b.Property<string>("DAYOFCLEANING")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DAYOFCLEANING");

                    b.Property<string>("DescOfItem")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DescOfItem");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Details");

                    b.Property<string>("Disposal")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Disposal");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Image");

                    b.Property<string>("LocationOfItem")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LocationOfItem");

                    b.Property<DateTime>("MinuteAlloted")
                        .HasColumnType("datetime2")
                        .HasColumnName("MinuteAlloted");

                    b.Property<int>("NutritionId")
                        .HasColumnType("int")
                        .HasColumnName("NutritionId");

                    b.Property<string>("SEEVIDEO")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("SEEVIDEO");

                    b.Property<int>("STAFFId")
                        .HasColumnType("int")
                        .HasColumnName("STAFFId");

                    b.Property<string>("SafetyHazard")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SafetyHazard");

                    b.Property<int>("WhereToGet")
                        .HasColumnType("int")
                        .HasColumnName("WhereToGet");

                    b.Property<string>("WhereToKeep")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WhereToKeep");

                    b.HasKey("CleaningId");

                    b.HasIndex("NutritionId");

                    b.HasIndex("STAFFId");

                    b.ToTable("tbl_Client_Cleaning", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientComplainRegister", b =>
                {
                    b.Property<int>("ComplainId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComplainId"), 1L, 1);

                    b.Property<string>("ACTIONTAKEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ACTIONTAKEN");

                    b.Property<string>("COMPLAINANTCONTACT")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("COMPLAINANTCONTACT");

                    b.Property<string>("CONCERNSRAISED")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CONCERNSRAISED");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<DateTime>("DATEOFACKNOWLEDGEMENT")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATEOFACKNOWLEDGEMENT");

                    b.Property<DateTime>("DATERECIEVED")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATERECIEVED");

                    b.Property<DateTime>("DUEDATE")
                        .HasColumnType("datetime2")
                        .HasColumnName("DUEDATE");

                    b.Property<string>("EvidenceFilePath")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EvidenceFilePath");

                    b.Property<string>("FINALRESPONSETOFAMILY")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FINALRESPONSETOFAMILY");

                    b.Property<DateTime>("INCIDENTDATE")
                        .HasColumnType("datetime2")
                        .HasColumnName("INCIDENTDATE");

                    b.Property<string>("INVESTIGATIONOUTCOME")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("INVESTIGATIONOUTCOME");

                    b.Property<string>("IRFNUMBER")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IRFNUMBER ");

                    b.Property<string>("LETTERTOSTAFF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LETTERTOSTAFF");

                    b.Property<string>("LINK")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LINK");

                    b.Property<string>("REMARK")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("REMARK");

                    b.Property<string>("ROOTCAUSE")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ROOTCAUSE");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reference");

                    b.Property<string>("SOURCEOFCOMPLAINTS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SOURCEOFCOMPLAINTS");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusId");

                    b.HasKey("ComplainId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_Client_ComplainRegister", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientDailyTask", b =>
                {
                    b.Property<int>("DailyTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DailyTaskId"), 1L, 1);

                    b.Property<DateTime>("AmendmentDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("AmendmentDate");

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<string>("DailyTaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DailyTaskName");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.HasKey("DailyTaskId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_ClientDailyTask", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientEyeHealthMonitoring", b =>
                {
                    b.Property<int>("EyeHealthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EyeHealthId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<int>("CurrentScore")
                        .HasColumnType("int")
                        .HasColumnName("CurrentScore");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<int>("MethodUsed")
                        .HasColumnType("int")
                        .HasColumnName("MethodUsed");

                    b.Property<string>("MethodUsedAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MethodUsedAttach");

                    b.Property<int>("PatientGlasses")
                        .HasColumnType("int")
                        .HasColumnName("PatientGlasses");

                    b.Property<string>("PhysicianResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhysicianResponse");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("StatusAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StatusAttach");

                    b.Property<int>("StatusImage")
                        .HasColumnType("int")
                        .HasColumnName("StatusImage");

                    b.Property<int>("TargetSet")
                        .HasColumnType("int")
                        .HasColumnName("TargetSet");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("Time");

                    b.Property<int>("ToolUsed")
                        .HasColumnType("int")
                        .HasColumnName("ToolUsed");

                    b.Property<string>("ToolUsedAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ToolUsedAttach");

                    b.HasKey("EyeHealthId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_Client_EyeHealthMonitoring", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientFoodIntake", b =>
                {
                    b.Property<int>("FoodIntakeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FoodIntakeId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<int>("CurrentIntake")
                        .HasColumnType("int")
                        .HasColumnName("CurrentIntake");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<int>("Goal")
                        .HasColumnType("int")
                        .HasColumnName("Goal");

                    b.Property<string>("PhysicianResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhysicianResponse");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("StatusAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StatusAttach");

                    b.Property<int>("StatusImage")
                        .HasColumnType("int")
                        .HasColumnName("StatusImage");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("Time");

                    b.HasKey("FoodIntakeId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_Client_FoodIntake", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientHealthCondition", b =>
                {
                    b.Property<int>("CHCId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CHCId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<int>("HCId")
                        .HasColumnType("int")
                        .HasColumnName("HCId");

                    b.HasKey("CHCId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_ClientHealthCondition", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientHeartRate", b =>
                {
                    b.Property<int>("HeartRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HeartRateId"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasColumnName("Age");

                    b.Property<int>("BeatsPerSeconds")
                        .HasColumnType("int")
                        .HasColumnName("BeatsPerSeconds");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("Gender");

                    b.Property<string>("GenderAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("GenderAttach");

                    b.Property<string>("PhysicianResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhysicianResponse");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("SeeChart")
                        .HasColumnType("int")
                        .HasColumnName("SeeChart");

                    b.Property<string>("SeeChartAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SeeChartAttach");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<int>("TargetHR")
                        .HasColumnType("int")
                        .HasColumnName("TargetHR");

                    b.Property<string>("TargetHRAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TargetHRAttach");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("Time");

                    b.HasKey("HeartRateId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_Client_HeartRate", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientHobbies", b =>
                {
                    b.Property<int>("CHId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CHId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<int>("HId")
                        .HasColumnType("int")
                        .HasColumnName("HId");

                    b.HasKey("CHId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_ClientHobbies", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientInvolvingParty", b =>
                {
                    b.Property<int>("ClientInvolvingPartyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientInvolvingPartyId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientInvolvingPartyId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("Address");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<int>("ClientInvolvingPartyItemId")
                        .HasColumnType("int")
                        .HasColumnName("ClientInvolvingPartyItemId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)")
                        .HasColumnName("Email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Relationship");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Telephone");

                    b.HasKey("ClientInvolvingPartyId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ClientInvolvingPartyItemId");

                    b.ToTable("tbl_ClientInvolvingParty", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientInvolvingPartyItem", b =>
                {
                    b.Property<int>("ClientInvolvingPartyItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientInvolvingPartyItemId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientInvolvingPartyItemId"), 1L, 1);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("Description");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ItemName");

                    b.HasKey("ClientInvolvingPartyItemId");

                    b.HasIndex("ItemName")
                        .IsUnique()
                        .HasDatabaseName("IX_tbl_ClientInvolvingPartyItem_ItemName");

                    b.ToTable("tbl_ClientInvolvingPartyItem", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientLogAudit", b =>
                {
                    b.Property<int>("LogAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogAuditId"), 1L, 1);

                    b.Property<string>("ActionRecommended")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionRecommended");

                    b.Property<string>("ActionTaken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionTaken");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<string>("Communication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Communication");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<string>("EvidenceFilePath")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EvidenceFilePath");

                    b.Property<string>("EvidenceOfActionTaken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EvidenceOfActionTaken");

                    b.Property<string>("ImproperDocumentation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ImproperDocumentation");

                    b.Property<string>("IsCareDifference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IsCareDifference");

                    b.Property<string>("IsCareExpected")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IsCareExpected");

                    b.Property<string>("LessonLearntAndShared")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LessonLearntAndShared");

                    b.Property<string>("LogURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LogURL");

                    b.Property<string>("NameOfAuditor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NameOfAuditor");

                    b.Property<DateTime>("NextDueDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("NextDueDate");

                    b.Property<string>("Observations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Observations");

                    b.Property<string>("ProperDocumentation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ProperDocumentation");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reference");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("RepeatOfIncident")
                        .HasColumnType("int")
                        .HasColumnName("RepeatOfIncident");

                    b.Property<string>("RotCause")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RotCause");

                    b.Property<int?>("StaffPersonalInfoId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("ThinkingServiceUsers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ThinkingServiceUsers");

                    b.Property<string>("ThinkingStaff")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ThinkingStaff");

                    b.Property<string>("ThinkingStaffStop")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ThinkingStaffStop");

                    b.HasKey("LogAuditId");

                    b.HasIndex("ClientId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_Client_LogAudit", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientMealDays", b =>
                {
                    b.Property<int>("ClientMealId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientMealId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientMealId"), 1L, 1);

                    b.Property<int>("ClientMealTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ClientMealTypeId");

                    b.Property<string>("HOWTOPREPARE")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("HOWTOPREPARE");

                    b.Property<string>("MEALDETAILS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MEALDETAILS");

                    b.Property<int>("MealDayofWeekId")
                        .HasColumnType("int")
                        .HasColumnName("MealDayofWeekId");

                    b.Property<int>("NutritionId")
                        .HasColumnType("int")
                        .HasColumnName("NutritionId");

                    b.Property<string>("PICTURE")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PICTURE");

                    b.Property<string>("SEEVIDEO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SEEVIDEO");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeId");

                    b.HasKey("ClientMealId");

                    b.HasIndex("ClientMealTypeId");

                    b.HasIndex("MealDayofWeekId");

                    b.HasIndex("NutritionId");

                    b.ToTable("tbl_Client_MealDay", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientMealType", b =>
                {
                    b.Property<int>("ClientMealTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientMealTypeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientMealTypeId"), 1L, 1);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted");

                    b.Property<string>("MealType")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("MealType");

                    b.HasKey("ClientMealTypeId");

                    b.HasIndex("MealType")
                        .IsUnique()
                        .HasDatabaseName("IX_tbl_Client_MealType_MealType");

                    b.ToTable("tbl_Client_MealType", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientMedAudit", b =>
                {
                    b.Property<int>("MedAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedAuditId"), 1L, 1);

                    b.Property<string>("ActionRecommended")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionRecommended");

                    b.Property<string>("ActionTaken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionTaken");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<string>("EvidenceOfActionTaken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EvidenceOfActionTaken");

                    b.Property<int>("GapsInAdmistration")
                        .HasColumnType("int")
                        .HasColumnName("GapsInAdmistration");

                    b.Property<int>("HardCopyReview")
                        .HasColumnType("int")
                        .HasColumnName("HardCopyReview");

                    b.Property<string>("LessonLearntAndShared")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LessonLearntAndShared");

                    b.Property<string>("LogURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LogURL");

                    b.Property<int>("MarChartReview")
                        .HasColumnType("int")
                        .HasColumnName("MarChartReview");

                    b.Property<int>("MedicationConcern")
                        .HasColumnType("int")
                        .HasColumnName("MedicationConcern");

                    b.Property<int>("MedicationInfoUploadEefficiency")
                        .HasColumnType("int")
                        .HasColumnName("MedicationInfoUploadEefficiency");

                    b.Property<int>("MedicationSupplyEfficiency")
                        .HasColumnType("int")
                        .HasColumnName("MedicationSupplyEfficiency");

                    b.Property<DateTime>("NextDueDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("NextDueDate");

                    b.Property<string>("Observations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Observations");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reference");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("RepeatOfIncident")
                        .HasColumnType("int")
                        .HasColumnName("RepeatOfIncident");

                    b.Property<string>("RightsOfMedication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RightsOfMedication");

                    b.Property<string>("RotCause")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RotCause");

                    b.Property<int?>("StaffPersonalInfoId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("ThinkingServiceUsers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ThinkingServiceUsers");

                    b.HasKey("MedAuditId");

                    b.HasIndex("ClientId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_Client_MedAudit", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientMedication", b =>
                {
                    b.Property<int>("ClientMedicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientMedicationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientMedicationId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<string>("ClientMedImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClientMedImage");

                    b.Property<string>("Dossage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Dossage");

                    b.Property<string>("ExpiryDate")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("ExpiryDate");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Frequency");

                    b.Property<int>("Gap_Hour")
                        .HasColumnType("int")
                        .HasColumnName("Gap_Hour");

                    b.Property<int>("Means")
                        .HasColumnType("int")
                        .HasColumnName("Means");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int")
                        .HasColumnName("MedicationId");

                    b.Property<int>("MedicationManufacturerId")
                        .HasColumnType("int")
                        .HasColumnName("MedicationManufacturerId");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Remark");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Route");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("StartDate");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Status");

                    b.Property<string>("StopDate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("StopDate");

                    b.Property<int>("TimeCritical")
                        .HasColumnType("int")
                        .HasColumnName("TimeCritical");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Type");

                    b.HasKey("ClientMedicationId");

                    b.HasIndex("ClientId");

                    b.HasIndex("MedicationId");

                    b.HasIndex("MedicationManufacturerId");

                    b.ToTable("tbl_ClientMedication", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientMedicationDay", b =>
                {
                    b.Property<int>("ClientMedicationDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientMedicationDayId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientMedicationDayId"), 1L, 1);

                    b.Property<int>("ClientMedicationId")
                        .HasColumnType("int")
                        .HasColumnName("ClientMedicationId");

                    b.Property<int?>("ClientMedicationId1")
                        .HasColumnType("int");

                    b.Property<int>("RotaDayofWeekId")
                        .HasColumnType("int")
                        .HasColumnName("RotaDayofWeekId");

                    b.HasKey("ClientMedicationDayId");

                    b.HasIndex("ClientMedicationId");

                    b.HasIndex("ClientMedicationId1");

                    b.HasIndex("RotaDayofWeekId")
                        .IsUnique();

                    b.ToTable("tbl_ClientMedicationDay", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientMedicationPeriod", b =>
                {
                    b.Property<int>("ClientMedicationPeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientMedicationPeriodId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientMedicationPeriodId"), 1L, 1);

                    b.Property<int>("ClientMedicationDayId")
                        .HasColumnType("int")
                        .HasColumnName("ClientMedicationDayId");

                    b.Property<int>("ClientRotaTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ClientRotaTypeId");

                    b.Property<int>("RotaId")
                        .HasColumnType("int");

                    b.Property<string>("StartTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StopTime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientMedicationPeriodId");

                    b.HasIndex("ClientMedicationDayId");

                    b.HasIndex("ClientRotaTypeId");

                    b.ToTable("tbl_ClientMedicationPeriod", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientMgtVisit", b =>
                {
                    b.Property<int>("VisitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitId"), 1L, 1);

                    b.Property<string>("ActionRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionRequired");

                    b.Property<string>("ActionsTakenByMPCC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionsTakenByMPCC");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<string>("EvidenceOfActionTaken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EvidenceOfActionTaken");

                    b.Property<int>("HowToComplain")
                        .HasColumnType("int")
                        .HasColumnName("HowToComplain");

                    b.Property<string>("ImprovementExpect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ImprovementExpect");

                    b.Property<string>("LessonLearntAndShared")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LessonLearntAndShared");

                    b.Property<DateTime>("NextCheckDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("NextCheckDate");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Observation");

                    b.Property<int>("RateManagers")
                        .HasColumnType("int")
                        .HasColumnName("RateManagers");

                    b.Property<int>("RateServiceRecieving")
                        .HasColumnType("int")
                        .HasColumnName("RateServiceRecieving");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reference");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<string>("RotCause")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RotCause");

                    b.Property<int>("ServiceRecommended")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRecommended");

                    b.Property<int?>("StaffPersonalInfoId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("URL");

                    b.HasKey("VisitId");

                    b.HasIndex("ClientId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_Client_MgtVisit", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientNutrition", b =>
                {
                    b.Property<int>("NutritionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NutritionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NutritionId"), 1L, 1);

                    b.Property<string>("CleaningSpecialNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CleaningSpecialNote");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<DateTime>("DATEFROM")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATEFROM");

                    b.Property<DateTime>("DATETO")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATETO");

                    b.Property<string>("MealSpecialNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MealSpecialNote");

                    b.Property<string>("ShoppingSpecialNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ShoppingSpecialNote");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("StaffId");

                    b.HasKey("NutritionId");

                    b.HasIndex("ClientId");

                    b.HasIndex("StaffId");

                    b.ToTable("tbl_Client_Nutrition", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientOxygenLvl", b =>
                {
                    b.Property<int>("OxygenLvlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OxygenLvlId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<string>("CurrentReading")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CurrentReading");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<string>("PhysicianResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhysicianResponse");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("SeeChart")
                        .HasColumnType("int")
                        .HasColumnName("SeeChart");

                    b.Property<string>("SeeChartAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SeeChartAttach");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<int>("TargetOxygen")
                        .HasColumnType("int")
                        .HasColumnName("TargetOxygen");

                    b.Property<string>("TargetOxygenAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TargetOxygenAttach");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("Time");

                    b.HasKey("OxygenLvlId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_Client_Oxygenlvl", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientPainChart", b =>
                {
                    b.Property<int>("PainChartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PainChartId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<int>("Location")
                        .HasColumnType("int")
                        .HasColumnName("Location");

                    b.Property<string>("LocationAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LocationAttach");

                    b.Property<int>("PainLvl")
                        .HasColumnType("int")
                        .HasColumnName("PainLvl");

                    b.Property<string>("PhysicianResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhysicianResponse");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("StatusAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StatusAttach");

                    b.Property<int>("StatusImage")
                        .HasColumnType("int")
                        .HasColumnName("StatusImage");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("Time");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Type");

                    b.Property<string>("TypeAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TypeAttach");

                    b.HasKey("PainChartId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_Client_PainChart", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientPerformanceIndicator", b =>
                {
                    b.Property<int>("PerformanceIndicatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PerformanceIndicatorId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DueDate");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Heading");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("Rating");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.HasKey("PerformanceIndicatorId");

                    b.ToTable("tbl_ClientPerformanceIndicator", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientPerformanceIndicatorTask", b =>
                {
                    b.Property<int>("PerformanceIndicatorTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PerformanceIndicatorTaskId"), 1L, 1);

                    b.Property<int>("PerformanceIndicatorId")
                        .HasColumnType("int")
                        .HasColumnName("StaffCompetenceTestId");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasColumnName("Score");

                    b.Property<int>("Title")
                        .HasColumnType("int")
                        .HasColumnName("Title");

                    b.HasKey("PerformanceIndicatorTaskId");

                    b.HasIndex("PerformanceIndicatorId");

                    b.ToTable("tbl_ClientPerformanceIndicatorTask", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientProgram", b =>
                {
                    b.Property<int>("ProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgramId"), 1L, 1);

                    b.Property<string>("ActionRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionRequired");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<int>("DaysOfChoice")
                        .HasColumnType("int")
                        .HasColumnName("DaysOfChoice");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<int>("DetailsOfProgram")
                        .HasColumnType("int")
                        .HasColumnName("DetailsOfProgram");

                    b.Property<DateTime>("NextCheckDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("NextCheckDate");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Observation");

                    b.Property<int>("PlaceLocationProgram")
                        .HasColumnType("int")
                        .HasColumnName("PlaceLocationProgram");

                    b.Property<int>("ProgramOfChoice")
                        .HasColumnType("int")
                        .HasColumnName("ProgramOfChoice");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reference");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int?>("StaffPersonalInfoId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("URL");

                    b.HasKey("ProgramId");

                    b.HasIndex("ClientId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_Client_Program", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientPulseRate", b =>
                {
                    b.Property<int>("PulseRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PulseRateId"), 1L, 1);

                    b.Property<string>("Chart")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Chart");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<string>("CurrentPulse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CurrentPulse");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<string>("PhysicianResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhysicianResponse");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("SeeChart")
                        .HasColumnType("int")
                        .HasColumnName("SeeChart");

                    b.Property<string>("SeeChartAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SeeChartAttach");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<int>("TargetPulse")
                        .HasColumnType("int")
                        .HasColumnName("TargetPulse");

                    b.Property<string>("TargetPulseAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TargetPulseAttach");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("Time");

                    b.HasKey("PulseRateId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_Client_PulseRate", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientRegulatoryContact", b =>
                {
                    b.Property<int>("ClientRegulatoryContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientRegulatoryContactId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientRegulatoryContactId"), 1L, 1);

                    b.Property<int>("BaseRecordItemId")
                        .HasColumnType("int")
                        .HasColumnName("BaseRecordItemId");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<DateTime?>("DatePerformed")
                        .HasColumnType("datetime2")
                        .HasColumnName("DatePerformed");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DueDate");

                    b.Property<string>("Evidence")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Evidence");

                    b.HasKey("ClientRegulatoryContactId");

                    b.HasIndex("BaseRecordItemId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_ClientRegulatoryContact", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientRota", b =>
                {
                    b.Property<int>("ClientRotaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientRotaId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientRotaId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<int>("ClientRotaTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ClientRotaTypeId");

                    b.HasKey("ClientRotaId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ClientRotaTypeId");

                    b.ToTable("tbl_ClientRota", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientRotaDays", b =>
                {
                    b.Property<int>("ClientRotaDaysId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientRotaDaysId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientRotaDaysId"), 1L, 1);

                    b.Property<int?>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<int>("ClientRotaId")
                        .HasColumnType("int")
                        .HasColumnName("ClientRotaId");

                    b.Property<int?>("ClientRotaTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ClientRotaTypeId");

                    b.Property<int>("RotaDayofWeekId")
                        .HasColumnType("int")
                        .HasColumnName("RotaDayofWeekId");

                    b.Property<int>("RotaId")
                        .HasColumnType("int")
                        .HasColumnName("RotaId");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("StartTime");

                    b.Property<string>("StopTime")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("StopTime");

                    b.Property<string>("WeekDay")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("WeekDay");

                    b.HasKey("ClientRotaDaysId");

                    b.HasIndex("ClientRotaId");

                    b.HasIndex("RotaDayofWeekId");

                    b.HasIndex("RotaId");

                    b.ToTable("tbl_ClientRotaDays", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientRotaTask", b =>
                {
                    b.Property<int>("ClientRotaTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientRotaTaskId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientRotaTaskId"), 1L, 1);

                    b.Property<int>("ClientRotaDaysId")
                        .HasColumnType("int")
                        .HasColumnName("ClientRotaDaysId");

                    b.Property<int>("RotaTaskId")
                        .HasColumnType("int")
                        .HasColumnName("RotaTaskId");

                    b.HasKey("ClientRotaTaskId");

                    b.HasIndex("ClientRotaDaysId");

                    b.HasIndex("RotaTaskId");

                    b.ToTable("tbl_ClientRotaTask", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientRotaType", b =>
                {
                    b.Property<int>("ClientRotaTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientRotaTypeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientRotaTypeId"), 1L, 1);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted");

                    b.Property<string>("RotaType")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("RotaType");

                    b.HasKey("ClientRotaTypeId");

                    b.HasIndex("RotaType")
                        .IsUnique()
                        .HasDatabaseName("IX_tbl_ClientRotaType_RotaType");

                    b.ToTable("tbl_ClientRotaType", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientSeizure", b =>
                {
                    b.Property<int>("SeizureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeizureId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<int>("Often")
                        .HasColumnType("int")
                        .HasColumnName("Often");

                    b.Property<string>("PhysicianResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhysicianResponse");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("SeizureLength")
                        .HasColumnType("int")
                        .HasColumnName("SeizureLength");

                    b.Property<string>("SeizureLengthAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SeizureLengthAttach");

                    b.Property<int>("SeizureType")
                        .HasColumnType("int")
                        .HasColumnName("SeizureType");

                    b.Property<string>("SeizureTypeAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SeizureTypeAttach");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("StatusAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StatusAttach");

                    b.Property<int>("StatusImage")
                        .HasColumnType("int")
                        .HasColumnName("StatusImage");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("Time");

                    b.Property<string>("WhatHappened")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WhatHappened");

                    b.HasKey("SeizureId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_Client_Seizure", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientServiceDetail", b =>
                {
                    b.Property<int>("ClientServiceDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientServiceDetailId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientServiceDetailId"), 1L, 1);

                    b.Property<decimal>("AmountGiven")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("AmountGiven");

                    b.Property<decimal>("AmountReturned")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("AmountReturned");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<DateTimeOffset>("ServiceDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("ServiceDate");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("ClientServiceDetailId");

                    b.ToTable("tbl_ClientServiceDetail", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientServiceDetailItem", b =>
                {
                    b.Property<int>("ClientServiceDetailItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientServiceDetailItemId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientServiceDetailItemId"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Amount");

                    b.Property<int>("ClientServiceDetailId")
                        .HasColumnType("int")
                        .HasColumnName("ClientServiceDetailId");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("ItemName");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Rate");

                    b.HasKey("ClientServiceDetailItemId");

                    b.HasIndex("ClientServiceDetailId");

                    b.ToTable("tbl_ClientServiceDetailItem", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientServiceDetailReceipt", b =>
                {
                    b.Property<int>("ClientServiceDetailReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientServiceDetailReceiptId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientServiceDetailReceiptId"), 1L, 1);

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<int>("ClientServiceDetailId")
                        .HasColumnType("int")
                        .HasColumnName("ClientServiceDetailId");

                    b.HasKey("ClientServiceDetailReceiptId");

                    b.HasIndex("ClientServiceDetailId");

                    b.ToTable("tbl_ClientServiceDetailReceipt", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientServiceWatch", b =>
                {
                    b.Property<int>("WatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WatchId"), 1L, 1);

                    b.Property<string>("ActionRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionRequired");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<int>("Contact")
                        .HasColumnType("int")
                        .HasColumnName("Contact");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<int>("Details")
                        .HasColumnType("int")
                        .HasColumnName("Details");

                    b.Property<int>("Incident")
                        .HasColumnType("int")
                        .HasColumnName("Incident");

                    b.Property<DateTime>("NextCheckDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("NextCheckDate");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Observation");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reference");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int?>("StaffPersonalInfoId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("URL");

                    b.HasKey("WatchId");

                    b.HasIndex("ClientId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_Client_ServiceWatch", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientShopping", b =>
                {
                    b.Property<int>("ShoppingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ShoppingId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShoppingId"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Amount");

                    b.Property<DateTime>("DATEFROM")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATEFROM");

                    b.Property<DateTime>("DATETO")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATETO");

                    b.Property<string>("DAYOFSHOPPING")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DAYOFSHOPPING");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Description");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Image");

                    b.Property<string>("Item")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Item");

                    b.Property<string>("LocationOfPurchase")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("LocationOfPurchase");

                    b.Property<string>("MeansOfPurchase")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("MeansOfPurchase");

                    b.Property<int>("NutritionId")
                        .HasColumnType("int")
                        .HasColumnName("NutritionId");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.Property<int>("STAFFId")
                        .HasColumnType("int")
                        .HasColumnName("STAFFId");

                    b.HasKey("ShoppingId");

                    b.HasIndex("NutritionId");

                    b.HasIndex("STAFFId");

                    b.ToTable("tbl_Client_Shopping", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientVoice", b =>
                {
                    b.Property<int>("VoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoiceId"), 1L, 1);

                    b.Property<string>("ActionRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionRequired");

                    b.Property<string>("ActionsTakenByMPCC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionsTakenByMPCC");

                    b.Property<string>("AreasOfImprovements")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AreasOfImprovements");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<string>("EvidenceOfActionTaken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EvidenceOfActionTaken");

                    b.Property<string>("HealthGoalLongTerm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("HealthGoalLongTerm");

                    b.Property<string>("HealthGoalShortTerm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("HealthGoalShortTerm");

                    b.Property<int>("InterestedInPrograms")
                        .HasColumnType("int")
                        .HasColumnName("InterestedInPrograms");

                    b.Property<string>("LessonLearntAndShared")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LessonLearntAndShared");

                    b.Property<DateTime>("NextCheckDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("NextCheckDate");

                    b.Property<int>("OfficeStaffSupport")
                        .HasColumnType("int")
                        .HasColumnName("OfficeStaffSupport");

                    b.Property<int>("RateServiceRecieving")
                        .HasColumnType("int")
                        .HasColumnName("RateServiceRecieving");

                    b.Property<int>("RateStaffAttending")
                        .HasColumnType("int")
                        .HasColumnName("RateStaffAttending");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reference");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<string>("RotCause")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RotCause");

                    b.Property<string>("SomethingSpecial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SomethingSpecial");

                    b.Property<int?>("StaffPersonalInfoId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("URL");

                    b.HasKey("VoiceId");

                    b.HasIndex("ClientId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_Client_Voice", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientWoundCare", b =>
                {
                    b.Property<int>("WoundCareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WoundCareId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<int>("Goal")
                        .HasColumnType("int")
                        .HasColumnName("Goal");

                    b.Property<int>("Location")
                        .HasColumnType("int")
                        .HasColumnName("Location");

                    b.Property<string>("LocationAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LocationAttach");

                    b.Property<string>("MeasurementAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MeasurementAttach");

                    b.Property<int>("Measurment")
                        .HasColumnType("int")
                        .HasColumnName("Measurment");

                    b.Property<int>("PainLvl")
                        .HasColumnType("int")
                        .HasColumnName("PainLvl");

                    b.Property<string>("PhysicianResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhysicianResponse");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("StatusAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StatusAttach");

                    b.Property<int>("StatusImage")
                        .HasColumnType("int")
                        .HasColumnName("StatusImage");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("Time");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Type");

                    b.Property<string>("TypeAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TypeAttach");

                    b.Property<int>("UlcerStage")
                        .HasColumnType("int")
                        .HasColumnName("UlcerStage");

                    b.Property<string>("UlcerStageAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UlcerStageAttach");

                    b.Property<int>("WoundCause")
                        .HasColumnType("int")
                        .HasColumnName("WoundCause");

                    b.HasKey("WoundCareId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_Client_WoundCare", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.Communication", b =>
                {
                    b.Property<int>("CommunicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommunicationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommunicationId"), 1L, 1);

                    b.Property<DateTime>("CommuncationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CommuncationDate");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FromUserId");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnName("IsRead");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Message");

                    b.Property<string>("Subject")
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)")
                        .HasColumnName("Subject");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ToUserId");

                    b.HasKey("CommunicationId");

                    b.ToTable("tbl_Communication", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.CompanyContactModel", b =>
                {
                    b.Property<int>("CompanyContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyContactId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyContactId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ContactEmail");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ContactName");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ContactTelephone");

                    b.HasKey("CompanyContactId");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.ToTable("tbl_CompanyContact", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.CompanyModel", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Address");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("CompanyName");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Email");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Language");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LogoUrl");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Website");

                    b.HasKey("CompanyId");

                    b.ToTable("tbl_Company", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ComplainOfficerToAct", b =>
                {
                    b.Property<int>("ComplainOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ComplainOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComplainOfficerToActId"), 1L, 1);

                    b.Property<int>("ComplainId")
                        .HasColumnType("int")
                        .HasColumnName("ComplainId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("ComplainOfficerToActId");

                    b.HasIndex("ComplainId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_Complain_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ComplainStaffName", b =>
                {
                    b.Property<int>("ComplainStaffNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ComplainStaffNameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComplainStaffNameId"), 1L, 1);

                    b.Property<int>("ComplainId")
                        .HasColumnType("int")
                        .HasColumnName("ComplainId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("ComplainStaffNameId");

                    b.HasIndex("ComplainId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_Complain_StaffName", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ConsentCare", b =>
                {
                    b.Property<int>("CareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CareId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CareId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<int>("Name")
                        .HasColumnType("int")
                        .HasColumnName("Name");

                    b.Property<int>("PersonalDetailId")
                        .HasColumnType("int")
                        .HasColumnName("PersonalDetailId");

                    b.Property<int>("Signature")
                        .HasColumnType("int")
                        .HasColumnName("Signature");

                    b.HasKey("CareId");

                    b.HasIndex("PersonalDetailId")
                        .IsUnique();

                    b.ToTable("tbl_ConsentCare", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ConsentData", b =>
                {
                    b.Property<int>("DataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DataId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DataId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<int>("Name")
                        .HasColumnType("int")
                        .HasColumnName("Name");

                    b.Property<int>("PersonalDetailId")
                        .HasColumnType("int")
                        .HasColumnName("PersonalDetailId");

                    b.Property<int>("Signature")
                        .HasColumnType("int")
                        .HasColumnName("Signature");

                    b.HasKey("DataId");

                    b.HasIndex("PersonalDetailId")
                        .IsUnique();

                    b.ToTable("tbl_ConsentData", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ConsentLandLine", b =>
                {
                    b.Property<int>("LandlineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LandlineId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LandlineId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<int>("Name")
                        .HasColumnType("int")
                        .HasColumnName("Name");

                    b.Property<int>("PersonalDetailId")
                        .HasColumnType("int")
                        .HasColumnName("PersonalDetailId");

                    b.Property<int>("Signature")
                        .HasColumnType("int")
                        .HasColumnName("Signature");

                    b.HasKey("LandlineId");

                    b.HasIndex("PersonalDetailId")
                        .IsUnique();

                    b.ToTable("tbl_ConsentLandLine", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ConsentLandlineLog", b =>
                {
                    b.Property<int>("ConsentLandlineLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ConsentLandlineLogId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsentLandlineLogId"), 1L, 1);

                    b.Property<int>("BaseRecordId")
                        .HasColumnType("int")
                        .HasColumnName("BaseRecordId");

                    b.Property<int>("LandlineId")
                        .HasColumnType("int")
                        .HasColumnName("LandlineId");

                    b.HasKey("ConsentLandlineLogId");

                    b.HasIndex("LandlineId");

                    b.ToTable("tbl_ConsentLandlineLog", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.CuidiBuddy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<int>("CuidiBuddyId")
                        .HasColumnType("int")
                        .HasColumnName("CuidiBuddyId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_CuidiBuddy", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.DutyOnCall", b =>
                {
                    b.Property<int>("DutyOnCallId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DutyOnCallId"), 1L, 1);

                    b.Property<string>("ActionTaken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionTaken");

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<string>("ClientInitial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClientInitial");

                    b.Property<DateTime>("DateOfCall")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateOfCall");

                    b.Property<DateTime>("DateOfIncident")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateOfIncident");

                    b.Property<string>("DetailsOfIncident")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DetailsOfIncident");

                    b.Property<string>("DetailsRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DetailsRequired");

                    b.Property<int>("NotificationStatus")
                        .HasColumnType("int")
                        .HasColumnName("NotificationStatus");

                    b.Property<bool>("NotifyPerson")
                        .HasColumnType("bit")
                        .HasColumnName("NotifyPerson");

                    b.Property<bool>("NotifyStaffInvolved")
                        .HasColumnType("bit")
                        .HasColumnName("NotifyStaffInvolved");

                    b.Property<int>("PositionOfReporting")
                        .HasColumnType("int")
                        .HasColumnName("PositionOfReporting");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("Priority");

                    b.Property<string>("RefNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RefNo");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<string>("ReportedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ReportedBy");

                    b.Property<bool>("StaffBlacklisted")
                        .HasColumnType("bit")
                        .HasColumnName("StaffBlacklisted");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Subject");

                    b.Property<int>("TelephoneToCall")
                        .HasColumnType("int")
                        .HasColumnName("TelephoneToCall");

                    b.Property<DateTime>("TimeOfCall")
                        .HasColumnType("datetime2")
                        .HasColumnName("TimeOfCall");

                    b.Property<int>("TypeOfDutyCall")
                        .HasColumnType("int")
                        .HasColumnName("TypeOfDutyCall");

                    b.Property<int>("TypeOfIncident")
                        .HasColumnType("int")
                        .HasColumnName("TypeOfIncident");

                    b.HasKey("DutyOnCallId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_DutyOnCall", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.DutyOnCallPersonResponsible", b =>
                {
                    b.Property<int>("PersonResponsibleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PersonResponsibleId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonResponsibleId"), 1L, 1);

                    b.Property<int>("DutyOnCallId")
                        .HasColumnType("int")
                        .HasColumnName("DutyOnCallId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("PersonResponsibleId");

                    b.HasIndex("DutyOnCallId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_DutyOnCallPersonResponsible", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.DutyOnCallPersonToAct", b =>
                {
                    b.Property<int>("PersonToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PersonToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonToActId"), 1L, 1);

                    b.Property<int>("DutyOnCallId")
                        .HasColumnType("int")
                        .HasColumnName("DutyOnCallId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("PersonToActId");

                    b.HasIndex("DutyOnCallId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_DutyOnCallPersonToAct", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.Enotice", b =>
                {
                    b.Property<int>("EnoticeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnoticeId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Heading");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Image");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Note");

                    b.Property<string>("PublishBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PublishBy");

                    b.Property<int>("PublishTo")
                        .HasColumnType("int")
                        .HasColumnName("PublishTo");

                    b.Property<string>("Video")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Video");

                    b.HasKey("EnoticeId");

                    b.HasIndex("PublishTo");

                    b.ToTable("tbl_Enotice_", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.Equipment", b =>
                {
                    b.Property<int>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EquipmentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentId"), 1L, 1);

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<int>("Location")
                        .HasColumnType("int")
                        .HasColumnName("Location");

                    b.Property<int>("Name")
                        .HasColumnType("int")
                        .HasColumnName("Name");

                    b.Property<DateTime>("NextServiceDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("NextServiceDate");

                    b.Property<int>("PersonToAct")
                        .HasColumnType("int")
                        .HasColumnName("PersonToAct");

                    b.Property<int>("PersonalDetailId")
                        .HasColumnType("int")
                        .HasColumnName("PersonalDetailId");

                    b.Property<DateTime>("ServiceDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ServiceDate");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Type");

                    b.HasKey("EquipmentId");

                    b.HasIndex("PersonToAct");

                    b.HasIndex("PersonalDetailId");

                    b.ToTable("tbl_Equipment", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.EyeHealthOfficerToAct", b =>
                {
                    b.Property<int>("EyeHealthOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EyeHealthOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EyeHealthOfficerToActId"), 1L, 1);

                    b.Property<int>("EyeHealthId")
                        .HasColumnType("int")
                        .HasColumnName("EyeHealthId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("EyeHealthOfficerToActId");

                    b.HasIndex("EyeHealthId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_EyeHealth_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.EyeHealthPhysician", b =>
                {
                    b.Property<int>("EyeHealthPhysicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EyeHealthPhysicianId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EyeHealthPhysicianId"), 1L, 1);

                    b.Property<int>("EyeHealthId")
                        .HasColumnType("int")
                        .HasColumnName("EyeHealthId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("EyeHealthPhysicianId");

                    b.HasIndex("EyeHealthId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_EyeHealth_Physician", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.EyeHealthStaffName", b =>
                {
                    b.Property<int>("EyeHealthStaffNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EyeHealthStaffNameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EyeHealthStaffNameId"), 1L, 1);

                    b.Property<int>("EyeHealthId")
                        .HasColumnType("int")
                        .HasColumnName("EyeHealthId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("EyeHealthStaffNameId");

                    b.HasIndex("EyeHealthId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_EyeHealth_StaffName", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.FilesAndRecord", b =>
                {
                    b.Property<int>("FilesAndRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FilesAndRecordId"), 1L, 1);

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Subject");

                    b.HasKey("FilesAndRecordId");

                    b.HasIndex("ClientId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_FilesAndRecord", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.FoodIntakeOfficerToAct", b =>
                {
                    b.Property<int>("FoodIntakeOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FoodIntakeOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FoodIntakeOfficerToActId"), 1L, 1);

                    b.Property<int>("FoodIntakeId")
                        .HasColumnType("int")
                        .HasColumnName("FoodIntakeId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("FoodIntakeOfficerToActId");

                    b.HasIndex("FoodIntakeId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_FoodIntake_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.FoodIntakePhysician", b =>
                {
                    b.Property<int>("FoodIntakePhysicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FoodIntakePhysicianId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FoodIntakePhysicianId"), 1L, 1);

                    b.Property<int>("FoodIntakeId")
                        .HasColumnType("int")
                        .HasColumnName("FoodIntakeId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("FoodIntakePhysicianId");

                    b.HasIndex("FoodIntakeId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_FoodIntake_Physician", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.FoodIntakeStaffName", b =>
                {
                    b.Property<int>("FoodIntakeStaffNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FoodIntakeStaffNameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FoodIntakeStaffNameId"), 1L, 1);

                    b.Property<int>("FoodIntakeId")
                        .HasColumnType("int")
                        .HasColumnName("FoodIntakeId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("FoodIntakeStaffNameId");

                    b.HasIndex("FoodIntakeId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_FoodIntake_StaffName", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.HealthAndLiving", b =>
                {
                    b.Property<int>("HLId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HLId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HLId"), 1L, 1);

                    b.Property<int>("AbilityToRead")
                        .HasColumnType("int")
                        .HasColumnName("AbilityToRead");

                    b.Property<int>("AlcoholicDrink")
                        .HasColumnType("int")
                        .HasColumnName("AlcoholicDrink");

                    b.Property<int>("AllowChats")
                        .HasColumnType("int")
                        .HasColumnName("AllowChats");

                    b.Property<string>("BriefHealth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BriefHealth");

                    b.Property<string>("CareSupport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CareSupport");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<string>("ConstraintAttachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ConstraintAttachment");

                    b.Property<string>("ConstraintDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ConstraintDetails");

                    b.Property<int>("ConstraintRequired")
                        .HasColumnType("int")
                        .HasColumnName("ConstraintRequired");

                    b.Property<int>("ContinenceIssue")
                        .HasColumnType("int")
                        .HasColumnName("ContinenceIssue");

                    b.Property<string>("ContinenceNeeds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ContinenceNeeds");

                    b.Property<string>("ContinenceSource")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ContinenceSource");

                    b.Property<int>("DehydrationRisk")
                        .HasColumnType("int")
                        .HasColumnName("DehydrationRisk");

                    b.Property<int>("EatingWithStaff")
                        .HasColumnType("int")
                        .HasColumnName("EatingWithStaff");

                    b.Property<int>("Email")
                        .HasColumnType("int")
                        .HasColumnName("Email");

                    b.Property<int>("FamilyUpdate")
                        .HasColumnType("int")
                        .HasColumnName("FamilyUpdate");

                    b.Property<int>("FinanceManagement")
                        .HasColumnType("int")
                        .HasColumnName("FinanceManagement");

                    b.Property<int>("LaundaryRequired")
                        .HasColumnType("int")
                        .HasColumnName("LaundaryRequired");

                    b.Property<int>("LetterOpening")
                        .HasColumnType("int")
                        .HasColumnName("LetterOpening");

                    b.Property<int>("LifeStyle")
                        .HasColumnType("int")
                        .HasColumnName("LifeStyle");

                    b.Property<int>("MeansOfComm")
                        .HasColumnType("int")
                        .HasColumnName("MeansOfComm");

                    b.Property<string>("MovingAndHandling")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MovingAndHandling");

                    b.Property<int>("NeighbourInvolment")
                        .HasColumnType("int")
                        .HasColumnName("NeighbourInvolment");

                    b.Property<string>("ObserveHealth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ObserveHealth");

                    b.Property<int>("PostalService")
                        .HasColumnType("int")
                        .HasColumnName("PostalService");

                    b.Property<int>("PressureSore")
                        .HasColumnType("int")
                        .HasColumnName("PressureSore");

                    b.Property<int>("ShoppingRequired")
                        .HasColumnType("int")
                        .HasColumnName("ShoppingRequired");

                    b.Property<int>("Smoking")
                        .HasColumnType("int")
                        .HasColumnName("Smoking");

                    b.Property<string>("SpecialCaution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SpecialCaution");

                    b.Property<int>("SpecialCleaning")
                        .HasColumnType("int")
                        .HasColumnName("SpecialCleaning");

                    b.Property<string>("SupportToBed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SupportToBed");

                    b.Property<int>("TVandMusic")
                        .HasColumnType("int")
                        .HasColumnName("TVandMusic");

                    b.Property<int>("TeaChocolateCoffee")
                        .HasColumnType("int")
                        .HasColumnName("TeaChocolateCoffee");

                    b.Property<int>("TextFontSize")
                        .HasColumnType("int")
                        .HasColumnName("TextFontSize");

                    b.Property<int>("VideoCallRequired")
                        .HasColumnType("int")
                        .HasColumnName("VideoCallRequired");

                    b.Property<string>("WakeUp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WakeUp");

                    b.HasKey("HLId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_HealthAndLiving", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.HealthCondition", b =>
                {
                    b.Property<int>("HCId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HCId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("HCId");

                    b.ToTable("tbl_HealthCondition", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.HealthTask", b =>
                {
                    b.Property<int>("HealthTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HealthTaskId"), 1L, 1);

                    b.Property<int>("Answer")
                        .HasColumnType("int")
                        .HasColumnName("Answer");

                    b.Property<int>("BestId")
                        .HasColumnType("int")
                        .HasColumnName("BestId");

                    b.Property<int>("HeadingId")
                        .HasColumnType("int")
                        .HasColumnName("HeadingId");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("Title")
                        .HasColumnType("int")
                        .HasColumnName("Title");

                    b.HasKey("HealthTaskId");

                    b.HasIndex("BestId");

                    b.ToTable("tbl_HealthTask", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.HealthTask2", b =>
                {
                    b.Property<int>("HealthTask2Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HealthTask2Id"), 1L, 1);

                    b.Property<int>("Answer")
                        .HasColumnType("int")
                        .HasColumnName("Answer");

                    b.Property<int>("BestId")
                        .HasColumnType("int")
                        .HasColumnName("BestId");

                    b.Property<int>("Heading2Id")
                        .HasColumnType("int")
                        .HasColumnName("Heading2Id");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remark");

                    b.Property<int>("Title")
                        .HasColumnType("int")
                        .HasColumnName("Title");

                    b.HasKey("HealthTask2Id");

                    b.HasIndex("BestId");

                    b.ToTable("tbl_HealthTask2", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.HeartRateOfficerToAct", b =>
                {
                    b.Property<int>("HeartRateOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HeartRateOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HeartRateOfficerToActId"), 1L, 1);

                    b.Property<int>("HeartRateId")
                        .HasColumnType("int")
                        .HasColumnName("HeartRateId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("HeartRateOfficerToActId");

                    b.HasIndex("HeartRateId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_HeartRate_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.HeartRatePhysician", b =>
                {
                    b.Property<int>("HeartRatePhysicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HeartRatePhysicianId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HeartRatePhysicianId"), 1L, 1);

                    b.Property<int>("HeartRateId")
                        .HasColumnType("int")
                        .HasColumnName("HeartRateId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("HeartRatePhysicianId");

                    b.HasIndex("HeartRateId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_HeartRate_Physician", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.HeartRateStaffName", b =>
                {
                    b.Property<int>("HeartRateStaffNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HeartRateStaffNameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HeartRateStaffNameId"), 1L, 1);

                    b.Property<int>("HeartRateId")
                        .HasColumnType("int")
                        .HasColumnName("HeartRateId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("HeartRateStaffNameId");

                    b.HasIndex("HeartRateId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_HeartRate_StaffName", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.HistoryOfFall", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HistoryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoryId"), 1L, 1);

                    b.Property<string>("Cause")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cause");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Details");

                    b.Property<string>("Prevention")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Prevention");

                    b.HasKey("HistoryId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_HistoryOfFall", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.Hobbies", b =>
                {
                    b.Property<int>("HId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("HId");

                    b.ToTable("tbl_Hobbies", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.HomeRiskAssessment", b =>
                {
                    b.Property<int>("HomeRiskAssessmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HomeRiskAssessmentId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Heading");

                    b.HasKey("HomeRiskAssessmentId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_HomeRiskAssessment", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.HomeRiskAssessmentTask", b =>
                {
                    b.Property<int>("HomeRiskAssessmentTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HomeRiskAssessmentTaskId"), 1L, 1);

                    b.Property<int>("Answer")
                        .HasColumnType("int")
                        .HasColumnName("Answer");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("HomeRiskAssessmentId")
                        .HasColumnType("int")
                        .HasColumnName("HomeRiskAssessmentId");

                    b.Property<int>("Title")
                        .HasColumnType("int")
                        .HasColumnName("Title");

                    b.HasKey("HomeRiskAssessmentTaskId");

                    b.HasIndex("HomeRiskAssessmentId");

                    b.ToTable("tbl_HomeRiskAssessmentTask", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.HospitalEntry", b =>
                {
                    b.Property<int>("HospitalEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HospitalEntryId"), 1L, 1);

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<string>("CauseofAdmission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CauseofAdmission");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<int>("ConditionOfAdmission")
                        .HasColumnType("int")
                        .HasColumnName("ConditionOfAdmission");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<int>("IsFamilyInformed")
                        .HasColumnType("int")
                        .HasColumnName("IsFamilyInformed");

                    b.Property<int>("IsHomeCleaned")
                        .HasColumnType("int")
                        .HasColumnName("IsHomeCleaned");

                    b.Property<DateTime>("LastDateofAdmission")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastDateofAdmission");

                    b.Property<int>("MeansOfTransport")
                        .HasColumnType("int")
                        .HasColumnName("MeansOfTransport");

                    b.Property<int>("NameParamedicStaff")
                        .HasColumnType("int")
                        .HasColumnName("NameParamedicStaff");

                    b.Property<int>("ParamicStaffTeamNo")
                        .HasColumnType("int")
                        .HasColumnName("ParamicStaffTeamNo");

                    b.Property<DateTime>("PossibleDateReturn")
                        .HasColumnType("datetime2")
                        .HasColumnName("PossibleDateReturn");

                    b.Property<string>("PurposeofAdmission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PurposeofAdmission");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reference");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remark");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("Time");

                    b.Property<string>("URLLINK")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("URLLINK");

                    b.HasKey("HospitalEntryId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_HospitalEntry", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.HospitalEntryPersonToTakeAction", b =>
                {
                    b.Property<int>("HospitalEntryPersonToTakeActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HospitalEntryPersonToTakeActionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HospitalEntryPersonToTakeActionId"), 1L, 1);

                    b.Property<int>("HospitalEntryId")
                        .HasColumnType("int")
                        .HasColumnName("HospitalEntryId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("HospitalEntryPersonToTakeActionId");

                    b.HasIndex("HospitalEntryId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_HospitalEntryPersonToTakeAction", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.HospitalEntryStaffInvolved", b =>
                {
                    b.Property<int>("HospitalEntryStaffInvolvedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HospitalEntryStaffInvolvedId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HospitalEntryStaffInvolvedId"), 1L, 1);

                    b.Property<int>("HospitalEntryId")
                        .HasColumnType("int")
                        .HasColumnName("HospitalEntryId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("HospitalEntryStaffInvolvedId");

                    b.HasIndex("HospitalEntryId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_HospitalEntryStaffInvolved", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.HospitalExit", b =>
                {
                    b.Property<int>("HospitalExitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HospitalExitId"), 1L, 1);

                    b.Property<int>("AreContinentProductNeedAndAvailable")
                        .HasColumnType("int")
                        .HasColumnName("AreContinentProductNeedAndAvailable");

                    b.Property<int>("AreEqipmentNeededAvailable")
                        .HasColumnType("int")
                        .HasColumnName("AreEqipmentNeededAvailable");

                    b.Property<int>("AreLocalSupportOrProgramNeeded")
                        .HasColumnType("int")
                        .HasColumnName("AreLocalSupportOrProgramNeeded");

                    b.Property<int>("AreStaffTrainnedOnEquipmentNeeded")
                        .HasColumnType("int")
                        .HasColumnName("AreStaffTrainnedOnEquipmentNeeded");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("ConditionOnDischarge")
                        .HasColumnType("int")
                        .HasColumnName("ConditionOnDischarge");

                    b.Property<string>("ContactIncaseOfReAdmission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ContactIncaseOfReAdmission");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<int>("IsCarePlanUpdated")
                        .HasColumnType("int")
                        .HasColumnName("IsCarePlanUpdated");

                    b.Property<int>("IsGrosSriesAvaible")
                        .HasColumnType("int")
                        .HasColumnName("IsGrosSriesAvaible");

                    b.Property<int>("IsHomeCleaned")
                        .HasColumnType("int")
                        .HasColumnName("IsHomeCleaned");

                    b.Property<int>("IsMedicationAvaialable")
                        .HasColumnType("int")
                        .HasColumnName("IsMedicationAvaialable");

                    b.Property<int>("IsServiceUseronRota")
                        .HasColumnType("int")
                        .HasColumnName("IsServiceUseronRota");

                    b.Property<int>("ModeOfMeansOfTrasportBackHome")
                        .HasColumnType("int")
                        .HasColumnName("ModeOfMeansOfTrasportBackHome");

                    b.Property<int>("NumberOfStaffRequiredOnDischarge")
                        .HasColumnType("int")
                        .HasColumnName("NumberOfStaffRequiredOnDischarge");

                    b.Property<string>("PurposeofAdmission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PurposeofAdmission");

                    b.Property<int>("ReablementRequired")
                        .HasColumnType("int")
                        .HasColumnName("ReablementRequired");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reference");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remark");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("Time");

                    b.Property<string>("URLLINK")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("URLLINK");

                    b.Property<string>("WhichSupportIsNeeded")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WhichSupportIsNeeded");

                    b.Property<int>("isLittleCashAvailableForServiceUser")
                        .HasColumnType("int")
                        .HasColumnName("isLittleCashAvailableForServiceUser");

                    b.Property<int>("isRotaTeamInformed")
                        .HasColumnType("int")
                        .HasColumnName("isRotaTeamInformed");

                    b.HasKey("HospitalExitId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_HospitalExit", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.HospitalExitOfficerToTakeAction", b =>
                {
                    b.Property<int>("HospitalExitOfficerToTakeActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HospitalExitOfficerToTakeActionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HospitalExitOfficerToTakeActionId"), 1L, 1);

                    b.Property<int>("HospitalExitId")
                        .HasColumnType("int")
                        .HasColumnName("HospitalExitId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("HospitalExitOfficerToTakeActionId");

                    b.HasIndex("HospitalExitId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_HospitalExitOfficerToTakeAction", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.IncidentReporting", b =>
                {
                    b.Property<int>("IncidentReportingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IncidentReportingId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncidentReportingId"), 1L, 1);

                    b.Property<string>("ActionTaken")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ActionTaken");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<string>("IncidentDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IncidentDetails");

                    b.Property<int>("IncidentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("IncidentTypeId");

                    b.Property<int?>("ReportingStaffId")
                        .HasColumnType("int")
                        .HasColumnName("ReportingStaffId");

                    b.Property<int>("StaffInvolvedId")
                        .HasColumnType("int")
                        .HasColumnName("StaffInvolvedId");

                    b.Property<string>("Witness")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Witness");

                    b.HasKey("IncidentReportingId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_IncidentReporting", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.IncomingMeds", b =>
                {
                    b.Property<int>("IncomingMedsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncomingMedsId"), 1L, 1);

                    b.Property<string>("ChartImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ChartImage");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<string>("MedsImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MedsImage");

                    b.Property<string>("StaffName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StaffName");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StartDate");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<int>("UserName")
                        .HasColumnType("int")
                        .HasColumnName("UserName");

                    b.HasKey("IncomingMedsId");

                    b.HasIndex("UserName");

                    b.ToTable("tbl_Incoming_Meds", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.InfectionControl", b =>
                {
                    b.Property<int>("InfectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InfectionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InfectionId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<string>("Guideline")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Guideline");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("TestDate");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Type");

                    b.Property<int>("VaccStatus")
                        .HasColumnType("int")
                        .HasColumnName("VaccStatus");

                    b.HasKey("InfectionId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_InfectionControl", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.Interest", b =>
                {
                    b.Property<int>("InterestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InterestId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InterestId"), 1L, 1);

                    b.Property<int>("CommunityActivity")
                        .HasColumnType("int")
                        .HasColumnName("CommunityActivity");

                    b.Property<int>("EventAwarness")
                        .HasColumnType("int")
                        .HasColumnName("EventAwarness");

                    b.Property<int>("GoalAndObjective")
                        .HasColumnType("int")
                        .HasColumnName("GoalAndObjective");

                    b.Property<int>("GoalId")
                        .HasColumnType("int")
                        .HasColumnName("GoalId");

                    b.Property<int>("InformalActivity")
                        .HasColumnType("int")
                        .HasColumnName("InformalActivity");

                    b.Property<int>("LeisureActivity")
                        .HasColumnType("int")
                        .HasColumnName("LeisureActivity");

                    b.Property<int>("MaintainContact")
                        .HasColumnType("int")
                        .HasColumnName("MaintainContact");

                    b.HasKey("InterestId");

                    b.HasIndex("GoalId");

                    b.ToTable("tbl_Interest", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.InterestAndObjective", b =>
                {
                    b.Property<int>("GoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GoalId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GoalId"), 1L, 1);

                    b.Property<string>("Brief")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Brief");

                    b.Property<string>("CareGoal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CareGoal");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.HasKey("GoalId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_InterestAndObjective", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.Investigation", b =>
                {
                    b.Property<int>("InvestigationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InvestigationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvestigationId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<DateTimeOffset?>("ConclusionDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("ConclusionDate");

                    b.Property<int>("IncidentClass")
                        .HasColumnType("int")
                        .HasColumnName("IncidentClass");

                    b.Property<DateTimeOffset>("IncidentDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("IncidentDate");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remark");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("InvestigationId");

                    b.ToTable("tbl_Investigation", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.InvestigationAttachment", b =>
                {
                    b.Property<int>("InvestigationAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InvestigationAttachmentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvestigationAttachmentId"), 1L, 1);

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<int>("InvestigationId")
                        .HasColumnType("int")
                        .HasColumnName("InvestigationId");

                    b.HasKey("InvestigationAttachmentId");

                    b.HasIndex("InvestigationId");

                    b.ToTable("tbl_InvestigationAttachment", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.KeyIndicatorLog", b =>
                {
                    b.Property<int>("KeyIndicatorLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("KeyIndicatorLogId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KeyIndicatorLogId"), 1L, 1);

                    b.Property<int>("BaseRecordId")
                        .HasColumnType("int")
                        .HasColumnName("BaseRecordId");

                    b.Property<int>("KeyId")
                        .HasColumnType("int")
                        .HasColumnName("KeyId");

                    b.HasKey("KeyIndicatorLogId");

                    b.HasIndex("KeyId");

                    b.ToTable("tbl_KeyIndicatorLog", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.KeyIndicators", b =>
                {
                    b.Property<int>("KeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("KeyId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KeyId"), 1L, 1);

                    b.Property<string>("AboutMe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AboutMe");

                    b.Property<int>("Debture")
                        .HasColumnType("int")
                        .HasColumnName("Debture");

                    b.Property<string>("FamilyRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FamilyRole");

                    b.Property<int>("LivingStatus")
                        .HasColumnType("int")
                        .HasColumnName("LivingStatus");

                    b.Property<int>("PersonalDetailId")
                        .HasColumnType("int")
                        .HasColumnName("PersonalDetailId");

                    b.Property<string>("ThingsILike")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ThingsILike");

                    b.HasKey("KeyId");

                    b.HasIndex("PersonalDetailId")
                        .IsUnique();

                    b.ToTable("tbl_KeyIndicators", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.KeyWorkerOfficerToAct", b =>
                {
                    b.Property<int>("KeyWorkerOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("KeyWorkerOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KeyWorkerOfficerToActId"), 1L, 1);

                    b.Property<int>("KeyWorkerId")
                        .HasColumnType("int")
                        .HasColumnName("KeyWorkerId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("KeyWorkerOfficerToActId");

                    b.HasIndex("KeyWorkerId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_KeyWorker_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.KeyWorkerWorkteam", b =>
                {
                    b.Property<int>("KeyWorkerWorkteamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("KeyWorkerWorkteamId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KeyWorkerWorkteamId"), 1L, 1);

                    b.Property<int>("KeyWorkerId")
                        .HasColumnType("int")
                        .HasColumnName("KeyWorkerId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("KeyWorkerWorkteamId");

                    b.HasIndex("KeyWorkerId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_KeyWorker_StaffName", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.LogAuditOfficerToAct", b =>
                {
                    b.Property<int>("LogAuditOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LogAuditOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogAuditOfficerToActId"), 1L, 1);

                    b.Property<int>("LogAuditId")
                        .HasColumnType("int")
                        .HasColumnName("LogAuditId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("LogAuditOfficerToActId");

                    b.HasIndex("LogAuditId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_LogAudit_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ManagingTasks", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ManagingTasksId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<string>("Help")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Help");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<int>("Task")
                        .HasColumnType("int")
                        .HasColumnName("Task");

                    b.HasKey("TaskId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_ManagingTasks", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.MedAuditOfficerToAct", b =>
                {
                    b.Property<int>("MedAuditOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MedAuditOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedAuditOfficerToActId"), 1L, 1);

                    b.Property<int>("MedAuditId")
                        .HasColumnType("int")
                        .HasColumnName("MedAuditId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("MedAuditOfficerToActId");

                    b.HasIndex("MedAuditId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_MedAudit_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.MedAuditStaffName", b =>
                {
                    b.Property<int>("MedAuditStaffNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MedAuditStaffNameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedAuditStaffNameId"), 1L, 1);

                    b.Property<int>("MedAuditId")
                        .HasColumnType("int")
                        .HasColumnName("MedAuditId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("MedAuditStaffNameId");

                    b.HasIndex("MedAuditId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_MedAudit_AuditorName", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.MedCompOfficerToAct", b =>
                {
                    b.Property<int>("MedCompOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MedCompOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedCompOfficerToActId"), 1L, 1);

                    b.Property<int>("MedCompId")
                        .HasColumnType("int")
                        .HasColumnName("MedCompId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("MedCompOfficerToActId");

                    b.HasIndex("MedCompId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_MedComp_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.Medication", b =>
                {
                    b.Property<int>("MedicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MedicationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicationId"), 1L, 1);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("MedicationName");

                    b.Property<string>("Strength")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Strength");

                    b.HasKey("MedicationId");

                    b.ToTable("tbl_Medication", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.MedicationManufacturer", b =>
                {
                    b.Property<int>("MedicationManufacturerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MedicationManufacturerId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicationManufacturerId"), 1L, 1);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Manufacturer");

                    b.HasKey("MedicationManufacturerId");

                    b.HasIndex("Manufacturer")
                        .IsUnique()
                        .HasDatabaseName("IX_tbl_MedicationManufacturer_Manufacturer");

                    b.ToTable("tbl_MedicationManufacturer", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.OfficeAttendance", b =>
                {
                    b.Property<int>("AttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttendanceId"), 1L, 1);

                    b.Property<string>("ClockDiff")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClockDiff");

                    b.Property<DateTimeOffset?>("ClockIn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("ClockIn");

                    b.Property<string>("ClockInAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClockInAddress");

                    b.Property<string>("ClockInDistance")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClockInDistance");

                    b.Property<string>("ClockInMethod")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClockInMethod");

                    b.Property<DateTimeOffset?>("ClockOut")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("ClockOut");

                    b.Property<string>("ClockOutAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClockOutAddress");

                    b.Property<string>("ClockOutDistance")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClockOutDistance");

                    b.Property<string>("ClockOutMethod")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClockOutMethod");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("JobTitle");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Location");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remark");

                    b.Property<int>("Staff")
                        .HasColumnType("int")
                        .HasColumnName("Staff");

                    b.Property<int?>("StaffPersonalInfoId")
                        .HasColumnType("int");

                    b.Property<string>("StartTime")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StartTime");

                    b.Property<string>("StopTime")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StopTime");

                    b.HasKey("AttendanceId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_OfficeAttendance", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.OfficeLocation", b =>
                {
                    b.Property<int>("OfficeLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OfficeLocationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfficeLocationId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Address");

                    b.Property<string>("ContactPersonEmail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ContactPersonEmail");

                    b.Property<string>("ContactPersonFullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ContactPersonFullName");

                    b.Property<string>("ContactPersonPhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ContactPersonPhoneNumber");

                    b.Property<string>("Latitude")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Latitude");

                    b.Property<string>("Longitude")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Longitude");

                    b.Property<string>("UniqueId")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("UniqueId");

                    b.HasKey("OfficeLocationId");

                    b.ToTable("tbl_OfficeLocation", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.OneToOneOfficerToAct", b =>
                {
                    b.Property<int>("OneToOneOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OneToOneOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OneToOneOfficerToActId"), 1L, 1);

                    b.Property<int>("OneToOneId")
                        .HasColumnType("int")
                        .HasColumnName("OneToOneId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("OneToOneOfficerToActId");

                    b.HasIndex("OneToOneId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_OneToOne_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.OxygenLvlOfficerToAct", b =>
                {
                    b.Property<int>("OxygenLvlOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OxygenLvlOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OxygenLvlOfficerToActId"), 1L, 1);

                    b.Property<int>("OxygenLvlId")
                        .HasColumnType("int")
                        .HasColumnName("OxygenLvlId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("OxygenLvlOfficerToActId");

                    b.HasIndex("OxygenLvlId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_OxygenLvl_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.OxygenLvlPhysician", b =>
                {
                    b.Property<int>("OxygenLvlPhysicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OxygenLvlPhysicianId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OxygenLvlPhysicianId"), 1L, 1);

                    b.Property<int>("OxygenLvlId")
                        .HasColumnType("int")
                        .HasColumnName("OxygenLvlId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("OxygenLvlPhysicianId");

                    b.HasIndex("OxygenLvlId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_OxygenLvl_Physician", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.OxygenLvlStaffName", b =>
                {
                    b.Property<int>("OxygenLvlStaffNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OxygenLvlStaffNameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OxygenLvlStaffNameId"), 1L, 1);

                    b.Property<int>("OxygenLvlId")
                        .HasColumnType("int")
                        .HasColumnName("OxygenLvlId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("OxygenLvlStaffNameId");

                    b.HasIndex("OxygenLvlId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_OxygenLvl_StaffName", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.PainChartOfficerToAct", b =>
                {
                    b.Property<int>("PainChartOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PainChartOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PainChartOfficerToActId"), 1L, 1);

                    b.Property<int>("PainChartId")
                        .HasColumnType("int")
                        .HasColumnName("PainChartId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("PainChartOfficerToActId");

                    b.HasIndex("PainChartId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_PainChart_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.PainChartPhysician", b =>
                {
                    b.Property<int>("PainChartPhysicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PainChartPhysicianId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PainChartPhysicianId"), 1L, 1);

                    b.Property<int>("PainChartId")
                        .HasColumnType("int")
                        .HasColumnName("PainChartId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("PainChartPhysicianId");

                    b.HasIndex("PainChartId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_PainChart_Physician", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.PainChartStaffName", b =>
                {
                    b.Property<int>("PainChartStaffNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PainChartStaffNameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PainChartStaffNameId"), 1L, 1);

                    b.Property<int>("PainChartId")
                        .HasColumnType("int")
                        .HasColumnName("PainChartId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("PainChartStaffNameId");

                    b.HasIndex("PainChartId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_PainChart_StaffName", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.PerformanceIndicator", b =>
                {
                    b.Property<int>("PerformanceIndicatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PerformanceIndicatorId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DueDate");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Heading");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("Rating");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.HasKey("PerformanceIndicatorId");

                    b.ToTable("tbl_PerformanceIndicator", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.PerformanceIndicatorTask", b =>
                {
                    b.Property<int>("PerformanceIndicatorTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PerformanceIndicatorTaskId"), 1L, 1);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("PerformanceIndicatorId")
                        .HasColumnType("int")
                        .HasColumnName("StaffCompetenceTestId");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasColumnName("Score");

                    b.Property<int>("Title")
                        .HasColumnType("int")
                        .HasColumnName("Title");

                    b.HasKey("PerformanceIndicatorTaskId");

                    b.HasIndex("PerformanceIndicatorId");

                    b.ToTable("tbl_PerformanceIndicatorTask", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.Personal", b =>
                {
                    b.Property<int>("PersonalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PersonalId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonalId"), 1L, 1);

                    b.Property<int>("DNR")
                        .HasColumnType("int")
                        .HasColumnName("DNR");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nationality");

                    b.Property<int>("PersonalDetailId")
                        .HasColumnType("int")
                        .HasColumnName("PersonalDetailId");

                    b.Property<string>("Religion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Religion");

                    b.Property<int>("Smoking")
                        .HasColumnType("int")
                        .HasColumnName("Smoking");

                    b.HasKey("PersonalId");

                    b.HasIndex("PersonalDetailId")
                        .IsUnique();

                    b.ToTable("tbl_Personal", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.PersonalDetail", b =>
                {
                    b.Property<int>("PersonalDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PersonalDetailId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonalDetailId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.HasKey("PersonalDetailId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_PersonalDetail", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.PersonalHygiene", b =>
                {
                    b.Property<int>("HygieneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HygieneId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HygieneId"), 1L, 1);

                    b.Property<int>("Cleaning")
                        .HasColumnType("int")
                        .HasColumnName("Cleaning");

                    b.Property<int>("CleaningFreq")
                        .HasColumnType("int")
                        .HasColumnName("CleaningFreq");

                    b.Property<int>("CleaningTools")
                        .HasColumnType("int")
                        .HasColumnName("CleaningTools");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<int>("DesiredCleaning")
                        .HasColumnType("int")
                        .HasColumnName("DesiredCleaning");

                    b.Property<int>("DirtyLaundry")
                        .HasColumnType("int")
                        .HasColumnName("DirtyLaundry");

                    b.Property<int>("DryLaundry")
                        .HasColumnType("int")
                        .HasColumnName("DryLaundry");

                    b.Property<int>("GeneralAppliance")
                        .HasColumnType("int")
                        .HasColumnName("GeneralAppliance");

                    b.Property<int>("Ironing")
                        .HasColumnType("int")
                        .HasColumnName("Ironing");

                    b.Property<string>("LaundryGuide")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LaundryGuide");

                    b.Property<string>("LaundrySupport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LaundrySupport");

                    b.Property<int>("WashingMachine")
                        .HasColumnType("int")
                        .HasColumnName("WashingMachine");

                    b.Property<int>("WhoClean")
                        .HasColumnType("int")
                        .HasColumnName("WhoClean");

                    b.HasKey("HygieneId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_PersonalHygiene", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.PersonalityTest", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TestId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestId"), 1L, 1);

                    b.Property<int>("Answer")
                        .HasColumnType("int")
                        .HasColumnName("Answer");

                    b.Property<int>("GoalId")
                        .HasColumnType("int")
                        .HasColumnName("GoalId");

                    b.Property<int>("Question")
                        .HasColumnType("int")
                        .HasColumnName("Question");

                    b.HasKey("TestId");

                    b.HasIndex("GoalId");

                    b.ToTable("tbl_PersonalityTest", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.PersonCentred", b =>
                {
                    b.Property<int>("PersonCentredId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PersonCentredId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonCentredId"), 1L, 1);

                    b.Property<int>("Class")
                        .HasColumnType("int")
                        .HasColumnName("Class");

                    b.Property<string>("ExpSupport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExpSupport");

                    b.Property<int>("PersonalDetailId")
                        .HasColumnType("int")
                        .HasColumnName("PersonalDetailId");

                    b.HasKey("PersonCentredId");

                    b.HasIndex("PersonalDetailId");

                    b.ToTable("tbl_PersonCentred", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.PersonCentredFocus", b =>
                {
                    b.Property<int>("PersonCentredFocusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PersonCentredFocusId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonCentredFocusId"), 1L, 1);

                    b.Property<int>("BaseRecordId")
                        .HasColumnType("int")
                        .HasColumnName("BaseRecordId");

                    b.Property<int>("PersonCentredId")
                        .HasColumnType("int")
                        .HasColumnName("PersonCentredId");

                    b.HasKey("PersonCentredFocusId");

                    b.HasIndex("PersonCentredId");

                    b.ToTable("tbl_PersonCentredFocus", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.Pets", b =>
                {
                    b.Property<int>("PetsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PetsId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PetsId"), 1L, 1);

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Age");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("Gender");

                    b.Property<string>("MealPattern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MealPattern");

                    b.Property<int>("MealStorage")
                        .HasColumnType("int")
                        .HasColumnName("MealStorage");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("PetActivities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PetActivities");

                    b.Property<string>("PetCare")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PetCare");

                    b.Property<int>("PetInsurance")
                        .HasColumnType("int")
                        .HasColumnName("PetInsurance");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Type");

                    b.Property<int>("VetVisit")
                        .HasColumnType("int")
                        .HasColumnName("VetVisit");

                    b.HasKey("PetsId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_Pets", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.PhysicalAbility", b =>
                {
                    b.Property<int>("PhysicalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PhysicalId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhysicalId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<int>("Mobility")
                        .HasColumnType("int")
                        .HasColumnName("Mobility");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("PhysicalId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_PhysicalAbility", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ProgramOfficerToAct", b =>
                {
                    b.Property<int>("ProgramOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProgramOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgramOfficerToActId"), 1L, 1);

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("ProgramOfficerToActId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_Program_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.PulseRateOfficerToAct", b =>
                {
                    b.Property<int>("PulseRateOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PulseRateOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PulseRateOfficerToActId"), 1L, 1);

                    b.Property<int>("PulseRateId")
                        .HasColumnType("int")
                        .HasColumnName("PulseRateId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("PulseRateOfficerToActId");

                    b.HasIndex("PulseRateId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_PulseRate_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.PulseRatePhysician", b =>
                {
                    b.Property<int>("PulseRatePhysicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PulseRatePhysicianId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PulseRatePhysicianId"), 1L, 1);

                    b.Property<int>("PulseRateId")
                        .HasColumnType("int")
                        .HasColumnName("PulseRateId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("PulseRatePhysicianId");

                    b.HasIndex("PulseRateId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_PulseRate_Physician", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.PulseRateStaffName", b =>
                {
                    b.Property<int>("PulseRateStaffNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PulseRateStaffNameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PulseRateStaffNameId"), 1L, 1);

                    b.Property<int>("PulseRateId")
                        .HasColumnType("int")
                        .HasColumnName("PulseRateId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("PulseRateStaffNameId");

                    b.HasIndex("PulseRateId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_PulseRate_StaffName", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.Resources", b =>
                {
                    b.Property<int>("ResourcesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResourcesId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Heading");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Image");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Note");

                    b.Property<string>("PublishBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PublishBy");

                    b.Property<int>("PublishTo")
                        .HasColumnType("int")
                        .HasColumnName("PublishTo");

                    b.Property<string>("Video")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Video");

                    b.HasKey("ResourcesId");

                    b.HasIndex("PublishTo");

                    b.ToTable("tbl_Resources_", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReviewId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"), 1L, 1);

                    b.Property<DateTime>("CP_PreDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CP_PreDate");

                    b.Property<DateTime>("CP_ReviewDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CP_ReviewDate");

                    b.Property<int>("PersonalDetailId")
                        .HasColumnType("int")
                        .HasColumnName("PersonalDetailId");

                    b.Property<DateTime>("RA_PreDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("RA_PreDate");

                    b.Property<DateTime>("RA_ReviewDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("RA_ReviewDate");

                    b.HasKey("ReviewId");

                    b.HasIndex("PersonalDetailId")
                        .IsUnique();

                    b.ToTable("tbl_Review", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.Rota", b =>
                {
                    b.Property<int>("RotaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RotaId"), 1L, 1);

                    b.Property<string>("Area")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("Area");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("Gender");

                    b.Property<int>("NumberOfStaff")
                        .HasColumnType("int")
                        .HasColumnName("NumberOfStaff");

                    b.Property<string>("RotaName")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("RotaName");

                    b.HasKey("RotaId");

                    b.ToTable("tbl_ClientRotaName", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.RotaDayofWeek", b =>
                {
                    b.Property<int>("RotaDayofWeekId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RotaDayofWeekId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RotaDayofWeekId"), 1L, 1);

                    b.Property<string>("DayofWeek")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("DayofWeek");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted");

                    b.HasKey("RotaDayofWeekId");

                    b.ToTable("tbl_RotaDayofWeek", (string)null);

                    b.HasData(
                        new
                        {
                            RotaDayofWeekId = 1,
                            DayofWeek = "Monday",
                            Deleted = false
                        },
                        new
                        {
                            RotaDayofWeekId = 2,
                            DayofWeek = "Tuesday",
                            Deleted = false
                        },
                        new
                        {
                            RotaDayofWeekId = 3,
                            DayofWeek = "Wednesday",
                            Deleted = false
                        },
                        new
                        {
                            RotaDayofWeekId = 4,
                            DayofWeek = "Thursday",
                            Deleted = false
                        },
                        new
                        {
                            RotaDayofWeekId = 5,
                            DayofWeek = "Friday",
                            Deleted = false
                        },
                        new
                        {
                            RotaDayofWeekId = 6,
                            DayofWeek = "Saturday",
                            Deleted = false
                        },
                        new
                        {
                            RotaDayofWeekId = 7,
                            DayofWeek = "Sunday",
                            Deleted = false
                        });
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.RotaPin", b =>
                {
                    b.Property<int>("PinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PinId"), 1L, 1);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Key");

                    b.Property<int>("Pin")
                        .HasColumnType("int")
                        .HasColumnName("Pin");

                    b.HasKey("PinId");

                    b.ToTable("tbl_RotaPin", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.RotaTask", b =>
                {
                    b.Property<int>("RotaTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RotaTaskId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RotaTaskId"), 1L, 1);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted");

                    b.Property<string>("GivenAcronym")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("GivenAcronym");

                    b.Property<string>("NotGivenAcronym")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NotGivenAcronym");

                    b.Property<string>("Remark")
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)")
                        .HasColumnName("Remark");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)")
                        .HasColumnName("TaskName");

                    b.HasKey("RotaTaskId");

                    b.HasIndex("GivenAcronym")
                        .IsUnique()
                        .HasDatabaseName("IX_tbl_RotaTask_GivenAcronym");

                    b.HasIndex("NotGivenAcronym")
                        .IsUnique()
                        .HasDatabaseName("IX_tbl_RotaTask_NotGivenAcronym");

                    b.HasIndex("TaskName")
                        .IsUnique()
                        .HasDatabaseName("IX_tbl_RotaTask_TaskName");

                    b.ToTable("tbl_RotaTask", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.SalaryAllowance", b =>
                {
                    b.Property<int>("SalaryAllowanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalaryAllowanceId"), 1L, 1);

                    b.Property<int>("AllowanceType")
                        .HasColumnType("int")
                        .HasColumnName("AllowanceType");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Amount");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDate");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Percentage");

                    b.Property<string>("Reoccurent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reoccurent");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.HasKey("SalaryAllowanceId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_SalaryAllowance", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.SalaryDeduction", b =>
                {
                    b.Property<int>("SalaryDeductionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalaryDeductionId"), 1L, 1);

                    b.Property<int>("AllowanceType")
                        .HasColumnType("int")
                        .HasColumnName("AllowanceType");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Amount");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDate");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Percentage");

                    b.Property<string>("Reoccurent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reoccurent");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.HasKey("SalaryDeductionId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_SalaryDeduction", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.SeizureOfficerToAct", b =>
                {
                    b.Property<int>("SeizureOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SeizureOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeizureOfficerToActId"), 1L, 1);

                    b.Property<int>("SeizureId")
                        .HasColumnType("int")
                        .HasColumnName("SeizureId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("SeizureOfficerToActId");

                    b.HasIndex("SeizureId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_Seizure_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.SeizurePhysician", b =>
                {
                    b.Property<int>("SeizurePhysicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SeizurePhysicianId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeizurePhysicianId"), 1L, 1);

                    b.Property<int>("SeizureId")
                        .HasColumnType("int")
                        .HasColumnName("SeizureId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("SeizurePhysicianId");

                    b.HasIndex("SeizureId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_Seizure_Physician", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.SeizureStaffName", b =>
                {
                    b.Property<int>("SeizureStaffNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SeizureStaffNameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeizureStaffNameId"), 1L, 1);

                    b.Property<int>("SeizureId")
                        .HasColumnType("int")
                        .HasColumnName("SeizureId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("SeizureStaffNameId");

                    b.HasIndex("SeizureId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_Seizure_StaffName", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ServiceOfficerToAct", b =>
                {
                    b.Property<int>("ServiceOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ServiceOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceOfficerToActId"), 1L, 1);

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("ServiceOfficerToActId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_Service_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ServiceStaffName", b =>
                {
                    b.Property<int>("ServiceStaffNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ServiceStaffNameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceStaffNameId"), 1L, 1);

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("ServiceStaffNameId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_Service_StaffName", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.SetupStaffHoliday", b =>
                {
                    b.Property<int>("SetupHolidayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SetupHolidayId"), 1L, 1);

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("HoursSoFar")
                        .HasColumnType("int")
                        .HasColumnName("HoursSoFar");

                    b.Property<int>("IncrementalDailyHolidayByHrs")
                        .HasColumnType("int")
                        .HasColumnName("IncrementalDailyHolidayByHrs");

                    b.Property<int>("NumberOfDays")
                        .HasColumnType("int")
                        .HasColumnName("NumberOfDays");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remark");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("TypeOfHoliday")
                        .HasColumnType("int")
                        .HasColumnName("TypeOfHoliday");

                    b.Property<DateTime>("YearEndPeriodStartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("YearEndPeriodStartDate");

                    b.Property<DateTime>("YearOfEmployment")
                        .HasColumnType("datetime2")
                        .HasColumnName("YearOfEmployment");

                    b.HasKey("SetupHolidayId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_SetupStaffHoliday", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ShiftBooking", b =>
                {
                    b.Property<int>("ShiftBookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ShiftBookingId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShiftBookingId"), 1L, 1);

                    b.Property<bool>("DriverRequired")
                        .HasColumnType("bit")
                        .HasColumnName("DriverRequired");

                    b.Property<int>("NumberOfStaff")
                        .HasColumnType("int")
                        .HasColumnName("NumberOfStaff");

                    b.Property<int?>("PublishTo")
                        .HasColumnType("int")
                        .HasColumnName("PublishTo");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("Remark");

                    b.Property<int>("Rota")
                        .HasColumnType("int")
                        .HasColumnName("Rota");

                    b.Property<string>("ShiftDate")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("ShiftDate");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("StartTime");

                    b.Property<string>("StopTime")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("StopTime");

                    b.Property<int>("Team")
                        .HasColumnType("int")
                        .HasColumnName("Team_StaffPersonalInfoId");

                    b.HasKey("ShiftBookingId");

                    b.ToTable("tbl_ShiftBooking", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ShiftBookingBlockedDays", b =>
                {
                    b.Property<int>("ShiftBookingBlockedDaysId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ShiftBookingBlockedDaysId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShiftBookingBlockedDaysId"), 1L, 1);

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("Day");

                    b.Property<int>("ShiftBookingId")
                        .HasColumnType("int")
                        .HasColumnName("ShiftBookingId");

                    b.Property<string>("WeekDay")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("WeekDay");

                    b.HasKey("ShiftBookingBlockedDaysId");

                    b.HasIndex("ShiftBookingId");

                    b.ToTable("tbl_ShiftBookingBlockedDays", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.SpecialHealthAndMedication", b =>
                {
                    b.Property<int>("SHMId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SHMId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SHMId"), 1L, 1);

                    b.Property<int>("AccessMedication")
                        .HasColumnType("int")
                        .HasColumnName("AccessMedication");

                    b.Property<int>("AdminLvl")
                        .HasColumnType("int")
                        .HasColumnName("AdminLvl");

                    b.Property<string>("By")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("By");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<int>("Consent")
                        .HasColumnType("int")
                        .HasColumnName("Consent");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<int>("FamilyMeds")
                        .HasColumnType("int")
                        .HasColumnName("FamilyMeds");

                    b.Property<int>("FamilyReturnMed")
                        .HasColumnType("int")
                        .HasColumnName("FamilyReturnMed");

                    b.Property<int>("LeftoutMedicine")
                        .HasColumnType("int")
                        .HasColumnName("LeftoutMedicine");

                    b.Property<int>("MedAccessDenial")
                        .HasColumnType("int")
                        .HasColumnName("MedAccessDenial");

                    b.Property<string>("MedKeyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MedKeyCode");

                    b.Property<int>("MedicationAllergy")
                        .HasColumnType("int")
                        .HasColumnName("MedicationAllergy");

                    b.Property<string>("MedicationStorage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MedicationStorage");

                    b.Property<int>("MedsGPOrder")
                        .HasColumnType("int")
                        .HasColumnName("MedsGPOrder");

                    b.Property<int>("NameFormMedicaiton")
                        .HasColumnType("int")
                        .HasColumnName("NameFormMedicaiton");

                    b.Property<int>("NoMedAccess")
                        .HasColumnType("int")
                        .HasColumnName("NoMedAccess");

                    b.Property<int>("OverdoseContact")
                        .HasColumnType("int")
                        .HasColumnName("OverdoseContact");

                    b.Property<int>("PNRDoses")
                        .HasColumnType("int")
                        .HasColumnName("PNRDoses");

                    b.Property<string>("PNRMedList")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PNRMedList");

                    b.Property<int>("PNRMedReq")
                        .HasColumnType("int")
                        .HasColumnName("PNRMedReq");

                    b.Property<int>("PNRMedsAdmin")
                        .HasColumnType("int")
                        .HasColumnName("PNRMedsAdmin");

                    b.Property<string>("PNRMedsMissing")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PNRMedsMissing");

                    b.Property<int>("PharmaMARChart")
                        .HasColumnType("int")
                        .HasColumnName("PharmaMARChart");

                    b.Property<int>("SpecialStorage")
                        .HasColumnType("int")
                        .HasColumnName("SpecialStorage");

                    b.Property<int>("TempMARChart")
                        .HasColumnType("int")
                        .HasColumnName("TempMARChart");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Type");

                    b.Property<int>("WhoAdminister")
                        .HasColumnType("int")
                        .HasColumnName("WhoAdminister");

                    b.HasKey("SHMId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_SpecialHealthAndMedication", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.SpecialHealthCondition", b =>
                {
                    b.Property<int>("HealthCondId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HealthCondId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HealthCondId"), 1L, 1);

                    b.Property<string>("ClientAction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClientAction");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<string>("ClinicRecommendation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClinicRecommendation");

                    b.Property<string>("ConditionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ConditionName");

                    b.Property<string>("FeelingAfterIncident")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FeelingAfterIncident");

                    b.Property<string>("FeelingBeforeIncident")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FeelingBeforeIncident");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Frequency");

                    b.Property<string>("LifestyleSupport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LifestyleSupport");

                    b.Property<string>("LivingActivities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LivingActivities");

                    b.Property<string>("PlanningHealthCondition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PlanningHealthCondition");

                    b.Property<string>("SourceInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SourceInformation");

                    b.Property<string>("Trigger")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Trigger");

                    b.HasKey("HealthCondId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_SpecialHealthCondition", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.SpotCheckOfficerToAct", b =>
                {
                    b.Property<int>("SpotCheckOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SpotCheckOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpotCheckOfficerToActId"), 1L, 1);

                    b.Property<int>("SpotCheckId")
                        .HasColumnType("int")
                        .HasColumnName("SpotCheckId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("SpotCheckOfficerToActId");

                    b.HasIndex("SpotCheckId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_SpotCheck_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffAdlObs", b =>
                {
                    b.Property<int>("ObservationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ObservationID"), 1L, 1);

                    b.Property<string>("ActionRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionRequired");

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Comments");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Details");

                    b.Property<int>("FivePrinciples")
                        .HasColumnType("int")
                        .HasColumnName("FivePrinciples");

                    b.Property<DateTime>("NextCheckDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("NextCheckDate");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reference");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("StaffId");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("URL");

                    b.Property<int>("UnderstandingofControl")
                        .HasColumnType("int")
                        .HasColumnName("UnderstandingofControl");

                    b.Property<int>("UnderstandingofEquipment")
                        .HasColumnType("int")
                        .HasColumnName("UnderstandingofEquipment");

                    b.Property<int>("UnderstandingofService")
                        .HasColumnType("int")
                        .HasColumnName("UnderstandingofService");

                    b.HasKey("ObservationID");

                    b.HasIndex("ClientId");

                    b.HasIndex("StaffId");

                    b.ToTable("tbl_Staff_AdlObs", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffBlackList", b =>
                {
                    b.Property<int>("StaffBlackListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffBlackListId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffBlackListId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("Comment");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("StaffBlackListId");

                    b.HasIndex("ClientId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffBlackList", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffCommunication", b =>
                {
                    b.Property<int>("StaffCommunicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffCommunicationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffCommunicationId"), 1L, 1);

                    b.Property<string>("ActionTaken")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ActionTaken");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<int>("CommunicationClassId")
                        .HasColumnType("int")
                        .HasColumnName("CommunicationClass");

                    b.Property<string>("Concern")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Concern");

                    b.Property<string>("ExpectedAction")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ExpectedAction");

                    b.Property<int>("PersonInvolved")
                        .HasColumnType("int")
                        .HasColumnName("PersonInvolved");

                    b.Property<int>("PersonResponsibleForAction")
                        .HasColumnType("int")
                        .HasColumnName("PersonResponsibleForAction");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Telephone");

                    b.Property<DateTime>("ValueDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ValueDate");

                    b.HasKey("StaffCommunicationId");

                    b.ToTable("tbl_StaffCommunication", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffCompetenceTest", b =>
                {
                    b.Property<int>("StaffCompetenceTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffCompetenceTestId"), 1L, 1);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Heading");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("StaffCompetenceTestId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffCompetenceTest", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffCompetenceTestTask", b =>
                {
                    b.Property<int>("StaffCompetenceTestTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffCompetenceTestTaskId"), 1L, 1);

                    b.Property<int>("Answer")
                        .HasColumnType("int")
                        .HasColumnName("Answer");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("Point")
                        .HasColumnType("int")
                        .HasColumnName("Point");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasColumnName("Score");

                    b.Property<int>("StaffCompetenceTestId")
                        .HasColumnType("int")
                        .HasColumnName("StaffCompetenceTestId");

                    b.Property<int>("Title")
                        .HasColumnType("int")
                        .HasColumnName("Title");

                    b.HasKey("StaffCompetenceTestTaskId");

                    b.HasIndex("StaffCompetenceTestId");

                    b.ToTable("tbl_StaffCompetenceTestTask", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffEducation", b =>
                {
                    b.Property<int>("StaffEducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffEducationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffEducationId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Address");

                    b.Property<string>("Certificate")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)")
                        .HasColumnName("Certificate");

                    b.Property<string>("CertificateAttachment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CertificateAttachment");

                    b.Property<string>("EndDate")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("EndDate");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Institution");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Location");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("StartDate");

                    b.HasKey("StaffEducationId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffEducation", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffEmergencyContact", b =>
                {
                    b.Property<int>("StaffEmergencyContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffEmergencyContactId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffEmergencyContactId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Address");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ContactName");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Email");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Relationship");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Telephone");

                    b.HasKey("StaffEmergencyContactId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffEmergencyContact", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffHealth", b =>
                {
                    b.Property<int>("StaffHealthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffHealthId"), 1L, 1);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Heading");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("StaffHealthId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffHealth", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffHealthTask", b =>
                {
                    b.Property<int>("StaffHealthTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffHealthTaskId"), 1L, 1);

                    b.Property<int>("Answer")
                        .HasColumnType("int")
                        .HasColumnName("Answer");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("Point")
                        .HasColumnType("int")
                        .HasColumnName("Point");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasColumnName("Score");

                    b.Property<int>("StaffHealthId")
                        .HasColumnType("int")
                        .HasColumnName("StaffHealthId");

                    b.Property<int>("Title")
                        .HasColumnType("int")
                        .HasColumnName("Title");

                    b.HasKey("StaffHealthTaskId");

                    b.HasIndex("StaffHealthId");

                    b.ToTable("tbl_StaffHealthTask", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffHoliday", b =>
                {
                    b.Property<int>("StaffHolidayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffHolidayId"), 1L, 1);

                    b.Property<decimal>("AllocatedDays")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("AllocatedDays");

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<int>("Class")
                        .HasColumnType("int")
                        .HasColumnName("Class");

                    b.Property<string>("CopyOfHandover")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CopyOfHandover");

                    b.Property<decimal>("Days")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Days");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDate");

                    b.Property<string>("PersonOnResponsibility")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PersonOnResponsibility");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Purpose");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remark");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.Property<decimal>("YearOfService")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("YearOfService");

                    b.HasKey("StaffHolidayId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffHoliday", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffIncidentReporting", b =>
                {
                    b.Property<int>("StaffIncidentReportingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffIncidentReportingId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffIncidentReportingId"), 1L, 1);

                    b.Property<string>("ActionTaken")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ActionTaken");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<string>("IncidentDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IncidentDetails");

                    b.Property<int>("IncidentType")
                        .HasColumnType("int")
                        .HasColumnName("IncidentType");

                    b.Property<string>("LoggedById")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("LoggedById");

                    b.Property<DateTimeOffset>("LoggedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LoggedDate");

                    b.Property<int?>("ReportingStaffId")
                        .HasColumnType("int")
                        .HasColumnName("ReportingStaffId");

                    b.Property<int>("StaffInvolvedId")
                        .HasColumnType("int")
                        .HasColumnName("StaffInvolvedId");

                    b.Property<string>("Witness")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Witness");

                    b.HasKey("StaffIncidentReportingId");

                    b.ToTable("tbl_StaffIncidentReporting", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffInfectionControl", b =>
                {
                    b.Property<int>("InfectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InfectionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InfectionId"), 1L, 1);

                    b.Property<string>("Guideline")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Guideline");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("TestDate");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Type");

                    b.Property<int>("VaccStatus")
                        .HasColumnType("int")
                        .HasColumnName("VaccStatus");

                    b.HasKey("InfectionId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffInfectionControl", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffInterview", b =>
                {
                    b.Property<int>("StaffInterviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffInterviewId"), 1L, 1);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Heading");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("StaffInterviewId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffInterview", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffInterviewTask", b =>
                {
                    b.Property<int>("StaffInterviewTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffInterviewTaskId"), 1L, 1);

                    b.Property<int>("Answer")
                        .HasColumnType("int")
                        .HasColumnName("Answer");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("Point")
                        .HasColumnType("int")
                        .HasColumnName("Point");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasColumnName("Score");

                    b.Property<int>("StaffInterviewId")
                        .HasColumnType("int")
                        .HasColumnName("StaffInterviewId");

                    b.Property<int>("Title")
                        .HasColumnType("int")
                        .HasColumnName("Title");

                    b.HasKey("StaffInterviewTaskId");

                    b.HasIndex("StaffInterviewId");

                    b.ToTable("tbl_StaffInterviewTask", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffKeyWorkerVoice", b =>
                {
                    b.Property<int>("KeyWorkerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KeyWorkerId"), 1L, 1);

                    b.Property<string>("ActionRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionRequired");

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<string>("ChangesWeNeed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ChangesWeNeed");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Details");

                    b.Property<string>("HealthAndWellNessChanges")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("HealthAndWellNessChanges");

                    b.Property<string>("MedicationChanges")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MedicationChanges");

                    b.Property<string>("MovingAndHandling")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MovingAndHandling");

                    b.Property<DateTime>("NextCheckDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("NextCheckDate");

                    b.Property<int>("NotComfortableServices")
                        .HasColumnType("int")
                        .HasColumnName("NotComfortableServices");

                    b.Property<string>("NutritionalChanges")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NutritionalChanges");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reference");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<string>("RiskAssessment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RiskAssessment");

                    b.Property<int>("ServicesRequiresServices")
                        .HasColumnType("int")
                        .HasColumnName("ServicesRequiresServices");

                    b.Property<int>("ServicesRequiresTime")
                        .HasColumnType("int")
                        .HasColumnName("ServicesRequiresTime");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("StaffId");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("URL");

                    b.Property<int>("WellSupportedServices")
                        .HasColumnType("int")
                        .HasColumnName("WellSupportedServices");

                    b.HasKey("KeyWorkerId");

                    b.HasIndex("ServicesRequiresServices");

                    b.HasIndex("StaffId");

                    b.ToTable("tbl_Staff_KeyWorkerVoice", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffMedComp", b =>
                {
                    b.Property<int>("MedCompId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedCompId"), 1L, 1);

                    b.Property<string>("ActionRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionRequired");

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<int>("CarePlan")
                        .HasColumnType("int")
                        .HasColumnName("CarePlan");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Details");

                    b.Property<DateTime>("NextCheckDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("NextCheckDate");

                    b.Property<int>("RateStaff")
                        .HasColumnType("int")
                        .HasColumnName("RateStaff");

                    b.Property<int>("ReadingMedicalPrescriptions")
                        .HasColumnType("int")
                        .HasColumnName("ReadingMedicalPrescriptions");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reference");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("StaffId");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("URL");

                    b.Property<int>("UnderstandingofMedication")
                        .HasColumnType("int")
                        .HasColumnName("UnderstandingofMedication");

                    b.Property<int>("UnderstandingofRights")
                        .HasColumnType("int")
                        .HasColumnName("UnderstandingofRights");

                    b.HasKey("MedCompId");

                    b.HasIndex("ClientId");

                    b.HasIndex("StaffId");

                    b.ToTable("tbl_Staff_MedCompObs", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffMedRota", b =>
                {
                    b.Property<int>("StaffRotaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffRotaId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffRotaId"), 1L, 1);

                    b.Property<string>("DoseGiven")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DoseGiven");

                    b.Property<string>("Feedback")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Feedback");

                    b.Property<string>("Location")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Location");

                    b.Property<string>("Measurement")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Measurement");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ReferenceNumber");

                    b.Property<string>("Remark")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("Remark");

                    b.Property<DateTime>("RotaDate")
                        .HasColumnType("date")
                        .HasColumnName("RotaDate");

                    b.Property<int?>("RotaDayofWeekId")
                        .HasColumnType("int")
                        .HasColumnName("RotaDayofWeekId");

                    b.Property<int>("RotaId")
                        .HasColumnType("int")
                        .HasColumnName("RotaId");

                    b.Property<int>("Staff")
                        .HasColumnType("int")
                        .HasColumnName("Staff");

                    b.Property<string>("Time")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Time");

                    b.HasKey("StaffRotaId");

                    b.HasIndex("RotaId");

                    b.ToTable("tbl_StaffMedRota", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffMedTracker", b =>
                {
                    b.Property<int>("StaffMedTrackerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffMedTrackerId"), 1L, 1);

                    b.Property<int>("ClientMedId")
                        .HasColumnType("int")
                        .HasColumnName("ClientMedId");

                    b.Property<string>("DoseGiven")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DoseGiven");

                    b.Property<DateTime>("MedTrackDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("MedTrackDate");

                    b.Property<int>("RotaId")
                        .HasColumnType("int")
                        .HasColumnName("RotaId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("StaffMedTrackerId");

                    b.ToTable("tbl_StaffMedTracker", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffOfficeLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Location")
                        .HasColumnType("int")
                        .HasColumnName("Location");

                    b.Property<int>("Staff")
                        .HasColumnType("int")
                        .HasColumnName("Staff");

                    b.HasKey("Id");

                    b.HasIndex("Location");

                    b.HasIndex("Staff");

                    b.ToTable("tbl_StaffOfficeLocation", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffOneToOne", b =>
                {
                    b.Property<int>("OneToOneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OneToOneId"), 1L, 1);

                    b.Property<string>("ActionRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionRequired");

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<string>("CurrentEventArea")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CurrentEventArea");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<string>("DecisionsReached")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DecisionsReached");

                    b.Property<string>("ImprovementRecorded")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ImprovementRecorded");

                    b.Property<DateTime>("NextCheckDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("NextCheckDate");

                    b.Property<int>("PreviousSupervision")
                        .HasColumnType("int")
                        .HasColumnName("PreviousSupervision");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Purpose");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reference");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<string>("StaffConclusion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StaffConclusion");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("StaffId");

                    b.Property<string>("StaffImprovedInAreas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StaffImprovedInAreas");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("URL");

                    b.HasKey("OneToOneId");

                    b.HasIndex("StaffId");

                    b.ToTable("tbl_Staff_OneToOne", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffPersonalInfo", b =>
                {
                    b.Property<int>("StaffPersonalInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffPersonalInfoId"), 1L, 1);

                    b.Property<string>("AboutMe")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("AboutMe");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("Address");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CV");

                    b.Property<string>("CanDrive")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("CanDrive");

                    b.Property<string>("CoverLetter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CoverLetter");

                    b.Property<string>("DBS")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("DBS");

                    b.Property<string>("DBSAttachment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DBSAttachment");

                    b.Property<DateTime?>("DBSExpiryDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DBSExpiryDate");

                    b.Property<string>("DBSUpdateNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DBSUpdateNo");

                    b.Property<string>("DateOfBirth")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DateOfBirth");

                    b.Property<string>("DrivingLicense")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DrivingLicense");

                    b.Property<DateTime?>("DrivingLicenseExpiryDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DrivingLicenseExpiryDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("Email");

                    b.Property<DateTime?>("EmploymentDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EmploymentDate");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDate");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FirstName");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasColumnName("Gender");

                    b.Property<bool?>("HasIdCard")
                        .HasColumnType("bit")
                        .HasColumnName("HasIdCard");

                    b.Property<bool?>("HasUniform")
                        .HasColumnType("bit")
                        .HasColumnName("HasUniform");

                    b.Property<string>("Hobbies")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("Hobbies");

                    b.Property<string>("IdNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("IdNumber");

                    b.Property<bool?>("IsKeyWorker")
                        .HasColumnType("bit")
                        .HasColumnName("IsKeyWorker");

                    b.Property<bool?>("IsTeamLeader")
                        .HasColumnType("bit")
                        .HasColumnName("IsTeamLeader");

                    b.Property<int?>("JobCategory")
                        .HasColumnType("int")
                        .HasColumnName("JobCategory");

                    b.Property<string>("Keyworker")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Keyworker");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LastName");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("MiddleName");

                    b.Property<string>("NI")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("NI");

                    b.Property<string>("NIAttachment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NIAttachment");

                    b.Property<DateTime?>("NIExpiryDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("NIExpiryDate");

                    b.Property<string>("Passcode")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("Passcode");

                    b.Property<string>("PlaceOfBirth")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PlaceOfBirth");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PostCode");

                    b.Property<string>("ProfilePix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ProfilePix");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Rate");

                    b.Property<string>("RegistrationId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("RegistrationId");

                    b.Property<string>("RightToWork")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("RightToWork");

                    b.Property<string>("RightToWorkAttachment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RightToWorkAttachment");

                    b.Property<DateTime?>("RightToWorkExpiryDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("RightToWorkExpiryDate");

                    b.Property<string>("Self_PYE")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("Self_PYE");

                    b.Property<string>("Self_PYEAttachment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Self_PYEAttachment");

                    b.Property<int?>("StaffWorkTeamId")
                        .HasColumnType("int")
                        .HasColumnName("StaffWorkTeamId");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("TeamLeader")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TeamLeader");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Telephone");

                    b.Property<string>("WorkTeam")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("WorkTeam");

                    b.HasKey("StaffPersonalInfoId");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique()
                        .HasFilter("[ApplicationUserId] IS NOT NULL");

                    b.HasIndex("RegistrationId")
                        .IsUnique()
                        .HasDatabaseName("IX_tbl_StaffPersonalInfo_RegistrationId")
                        .HasFilter("[RegistrationId] IS NOT NULL");

                    b.HasIndex("StaffWorkTeamId");

                    b.ToTable("tbl_StaffPersonalInfo", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffPersonalInfoComment", b =>
                {
                    b.Property<int>("StaffPersonalInfoCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoCommentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffPersonalInfoCommentId"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Comment");

                    b.Property<int?>("CommentBy_UserId")
                        .HasColumnType("int")
                        .HasColumnName("CommentBy_UserId");

                    b.Property<DateTime>("CommentOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("CommentOn");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("StaffPersonalInfoCommentId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffPersonalInfoComment", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffPersonalityTest", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TestId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestId"), 1L, 1);

                    b.Property<int>("Answer")
                        .HasColumnType("int")
                        .HasColumnName("Answer");

                    b.Property<int>("Question")
                        .HasColumnType("int")
                        .HasColumnName("Question");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("TestId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffPersonalityTest", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffRating", b =>
                {
                    b.Property<int>("StaffRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffRatingId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffRatingId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<DateTime?>("CommentDate")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasColumnName("CommentDate");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("Rating");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("SubmittedBy")
                        .HasColumnType("int")
                        .HasColumnName("SubmittedBy");

                    b.HasKey("StaffRatingId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffRating", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffReferee", b =>
                {
                    b.Property<int>("StaffRefereeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffRefereeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffRefereeId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Address");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)")
                        .HasColumnName("CompanyName");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)")
                        .HasColumnName("Email");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PhoneNumber");

                    b.Property<string>("PositionofReferee")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("PositionofReferee");

                    b.Property<string>("Referee")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)")
                        .HasColumnName("Referee");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("StaffRefereeId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffReferee", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffReference", b =>
                {
                    b.Property<int>("StaffReferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffReferenceId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Address");

                    b.Property<int>("ApplicantRole")
                        .HasColumnType("int")
                        .HasColumnName("ApplicantRole");

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<int>("Caring")
                        .HasColumnType("int")
                        .HasColumnName("Caring");

                    b.Property<int>("ConfirmedBy")
                        .HasColumnType("int")
                        .HasColumnName("ConfirmedBy");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Contact");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<int>("DateofEmployement")
                        .HasColumnType("int")
                        .HasColumnName("DateofEmployement");

                    b.Property<string>("DateofExit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DateofExit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<int>("Integrity")
                        .HasColumnType("int")
                        .HasColumnName("Integrity");

                    b.Property<int>("Knowledgeable")
                        .HasColumnType("int")
                        .HasColumnName("Knowledgeable");

                    b.Property<int>("PreviousExperience")
                        .HasColumnType("int")
                        .HasColumnName("PreviousExperience");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reference");

                    b.Property<string>("RefreeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RefreeName");

                    b.Property<string>("RehireStaff")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RehireStaff");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Relationship");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("StaffId");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<int>("TeamWork")
                        .HasColumnType("int")
                        .HasColumnName("TeamWork");

                    b.Property<int>("WorkUnderPressure")
                        .HasColumnType("int")
                        .HasColumnName("WorkUnderPressure");

                    b.HasKey("StaffReferenceId");

                    b.HasIndex("ApplicantRole");

                    b.HasIndex("StaffId");

                    b.ToTable("tbl_Staff_Reference", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffRegulatoryContact", b =>
                {
                    b.Property<int>("StaffRegulatoryContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffRegulatoryContactId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffRegulatoryContactId"), 1L, 1);

                    b.Property<int>("BaseRecordItemId")
                        .HasColumnType("int")
                        .HasColumnName("BaseRecordItemId");

                    b.Property<DateTime?>("DatePerformed")
                        .HasColumnType("datetime2")
                        .HasColumnName("DatePerformed");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DueDate");

                    b.Property<string>("Evidence")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Evidence");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("StaffRegulatoryContactId");

                    b.HasIndex("BaseRecordItemId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffRegulatoryContact", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffRota", b =>
                {
                    b.Property<int>("StaffRotaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffRotaId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffRotaId"), 1L, 1);

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ReferenceNumber");

                    b.Property<string>("Remark")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("Remark");

                    b.Property<DateTime>("RotaDate")
                        .HasColumnType("date")
                        .HasColumnName("RotaDate");

                    b.Property<int?>("RotaDayofWeekId")
                        .HasColumnType("int")
                        .HasColumnName("RotaDayofWeekId");

                    b.Property<int>("RotaId")
                        .HasColumnType("int")
                        .HasColumnName("RotaId");

                    b.Property<int>("Staff")
                        .HasColumnType("int")
                        .HasColumnName("Staff");

                    b.HasKey("StaffRotaId");

                    b.HasIndex("RotaId");

                    b.ToTable("tbl_StaffRota", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffRotaDynamicAddition", b =>
                {
                    b.Property<int>("StaffRotaDynamicAdditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffRotaDynamicAdditionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffRotaDynamicAdditionId"), 1L, 1);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ItemName");

                    b.HasKey("StaffRotaDynamicAdditionId");

                    b.ToTable("tbl_StaffRotaDynamicAddition", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffRotaItem", b =>
                {
                    b.Property<int>("StaffRotaItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffRotaItemId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffRotaItemId"), 1L, 1);

                    b.Property<int>("StaffRotaDynamicAdditionId")
                        .HasColumnType("int");

                    b.Property<int>("StaffRotaId")
                        .HasColumnType("int")
                        .HasColumnName("StaffRotaId");

                    b.HasKey("StaffRotaItemId");

                    b.HasIndex("StaffRotaId");

                    b.ToTable("tbl_StaffRotaItem", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffRotaPartner", b =>
                {
                    b.Property<int>("StaffRotaPartnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffRotaPartnerId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffRotaPartnerId"), 1L, 1);

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("StaffId");

                    b.Property<int>("StaffRotaId")
                        .HasColumnType("int")
                        .HasColumnName("StaffRotaId");

                    b.HasKey("StaffRotaPartnerId");

                    b.HasIndex("StaffRotaId");

                    b.ToTable("tbl_StaffRotaPartner", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffRotaPeriod", b =>
                {
                    b.Property<int>("StaffRotaPeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffRotaPeriodId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffRotaPeriodId"), 1L, 1);

                    b.Property<string>("BowelMovement")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("BowelMovement");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<int>("ClientRotaTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ClientRotaTypeId");

                    b.Property<string>("ClockInAddress")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("ClockInAddress");

                    b.Property<string>("ClockInClientTelephone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ClockInClientTelephone");

                    b.Property<string>("ClockInGeolocation")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("ClockInGeolocation");

                    b.Property<string>("ClockInMode")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("ClockInMode");

                    b.Property<DateTimeOffset?>("ClockInTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("ClockInTime");

                    b.Property<string>("ClockOutAddress")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("ClockOutAddress");

                    b.Property<string>("ClockOutClientTelephone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ClockOutClientTelephone");

                    b.Property<string>("ClockOutGeolocation")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("ClockOutGeolocation");

                    b.Property<string>("ClockOutMode")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("ClockOutMode");

                    b.Property<DateTimeOffset?>("ClockOutTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("ClockOutTime");

                    b.Property<string>("Comment")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("Comment");

                    b.Property<string>("Feedback")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("Feedback");

                    b.Property<string>("FluidIntake")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("FluidIntake");

                    b.Property<string>("HandOver")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("HandOver");

                    b.Property<string>("OralCare")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("OralCare");

                    b.Property<int>("StaffRotaId")
                        .HasColumnType("int")
                        .HasColumnName("StaffRotaId");

                    b.Property<string>("StartTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("StartTime");

                    b.Property<string>("StopTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("StopTime");

                    b.HasKey("StaffRotaPeriodId");

                    b.HasIndex("ClientRotaTypeId");

                    b.HasIndex("StaffRotaId");

                    b.ToTable("tbl_StaffRotaPeriod", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffRotaTask", b =>
                {
                    b.Property<int>("StaffRotaTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffRotaTaskId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffRotaTaskId"), 1L, 1);

                    b.Property<bool>("IsGiven")
                        .HasColumnType("bit")
                        .HasColumnName("IsGiven");

                    b.Property<int>("RotaTaskId")
                        .HasColumnType("int")
                        .HasColumnName("RotaTaskId");

                    b.Property<int>("StaffRotaPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("StaffRotaPeriodId");

                    b.HasKey("StaffRotaTaskId");

                    b.HasIndex("StaffRotaPeriodId");

                    b.ToTable("tbl_StaffRotaTask", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffShadowing", b =>
                {
                    b.Property<int>("StaffShadowingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffShadowingId"), 1L, 1);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Heading");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("StaffShadowingId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffShadowing", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffShadowingTask", b =>
                {
                    b.Property<int>("StaffShadowingTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffShadowingTaskId"), 1L, 1);

                    b.Property<int>("Answer")
                        .HasColumnType("int")
                        .HasColumnName("Answer");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("Point")
                        .HasColumnType("int")
                        .HasColumnName("Point");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasColumnName("Score");

                    b.Property<int>("StaffShadowingId")
                        .HasColumnType("int")
                        .HasColumnName("StaffShadowingId");

                    b.Property<int>("Title")
                        .HasColumnType("int")
                        .HasColumnName("Title");

                    b.HasKey("StaffShadowingTaskId");

                    b.HasIndex("StaffShadowingId");

                    b.ToTable("tbl_StaffShadowingTask", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffShiftBooking", b =>
                {
                    b.Property<int>("StaffShiftBookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffShiftBookingId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffShiftBookingId"), 1L, 1);

                    b.Property<int?>("RotaId")
                        .HasColumnType("int");

                    b.Property<int>("ShiftBookingId")
                        .HasColumnType("int")
                        .HasColumnName("ShiftBookingId");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("StaffShiftBookingId");

                    b.HasIndex("RotaId");

                    b.HasIndex("ShiftBookingId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffShiftBooking", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffShiftBookingDay", b =>
                {
                    b.Property<int>("StaffShiftBookingDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffShiftBookingDayId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffShiftBookingDayId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("Day");

                    b.Property<int>("StaffShiftBookingId")
                        .HasColumnType("int")
                        .HasColumnName("StaffShiftBookingId");

                    b.Property<string>("WeekDay")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("WeekDay");

                    b.HasKey("StaffShiftBookingDayId");

                    b.HasIndex("StaffShiftBookingId");

                    b.ToTable("tbl_StaffShiftBookingDay", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffSpotCheck", b =>
                {
                    b.Property<int>("SpotCheckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpotCheckId"), 1L, 1);

                    b.Property<string>("ActionRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionRequired");

                    b.Property<string>("AreaComments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AreaComments");

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Details");

                    b.Property<DateTime>("NextCheckDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("NextCheckDate");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reference");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("StaffArriveOnTime")
                        .HasColumnType("int")
                        .HasColumnName("StaffArriveOnTime");

                    b.Property<int>("StaffDressCode")
                        .HasColumnType("int")
                        .HasColumnName("StaffDressCode");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("StaffId");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("URL");

                    b.HasKey("SpotCheckId");

                    b.HasIndex("ClientId");

                    b.HasIndex("StaffId");

                    b.ToTable("tbl_Staff_SpotCheck", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffSupervisionAppraisal", b =>
                {
                    b.Property<int>("StaffSupervisionAppraisalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffSupervisionAppraisalId"), 1L, 1);

                    b.Property<string>("ActionRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionRequired");

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<string>("CondourAndWhistleBlowing")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CondourAndWhistleBlowing");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Details");

                    b.Property<string>("FiveStarRating")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FiveStarRating");

                    b.Property<DateTime>("NextCheckDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("NextCheckDate");

                    b.Property<string>("NoAbilityToSupport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NoAbilityToSupport");

                    b.Property<string>("NoCondourAndWhistleBlowing")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NoCondourAndWhistleBlowing");

                    b.Property<int>("ProfessionalDevelopment")
                        .HasColumnType("int")
                        .HasColumnName("ProfessionalDevelopment");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reference");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<string>("StaffAbility")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StaffAbility");

                    b.Property<int>("StaffComplaints")
                        .HasColumnType("int")
                        .HasColumnName("StaffComplaints");

                    b.Property<string>("StaffDevelopment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StaffDevelopment");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("StaffId");

                    b.Property<int>("StaffRating")
                        .HasColumnType("int")
                        .HasColumnName("StaffRating");

                    b.Property<int>("StaffSupportAreas")
                        .HasColumnType("int")
                        .HasColumnName("StaffSupportAreas");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("URL");

                    b.HasKey("StaffSupervisionAppraisalId");

                    b.HasIndex("StaffId");

                    b.ToTable("tbl_Staff_SupervisionAppraisal", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffSurvey", b =>
                {
                    b.Property<int>("StaffSurveyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffSurveyId"), 1L, 1);

                    b.Property<int>("AccessToPolicies")
                        .HasColumnType("int")
                        .HasColumnName("AccessToPolicies");

                    b.Property<string>("ActionRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionRequired");

                    b.Property<int>("AdequateTrainingReceived")
                        .HasColumnType("int")
                        .HasColumnName("AdequateTrainingReceived");

                    b.Property<string>("AreaRequiringImprovements")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AreaRequiringImprovements");

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<int>("CompanyManagement")
                        .HasColumnType("int")
                        .HasColumnName("CompanyManagement");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Details");

                    b.Property<int>("HealthCareServicesSatisfaction")
                        .HasColumnType("int")
                        .HasColumnName("HealthCareServicesSatisfaction");

                    b.Property<DateTime>("NextCheckDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("NextCheckDate");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reference");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("StaffId");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<int>("SupportFromCompany")
                        .HasColumnType("int")
                        .HasColumnName("SupportFromCompany");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("URL");

                    b.Property<string>("WorkEnvironmentSuggestions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WorkEnvironmentSuggestions");

                    b.HasKey("StaffSurveyId");

                    b.HasIndex("StaffId");

                    b.ToTable("tbl_Staff_Survey", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffTax", b =>
                {
                    b.Property<int>("StaffTaxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffTaxId"), 1L, 1);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("NI")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("NI");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Tax");

                    b.HasKey("StaffTaxId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffTax", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffTeamLead", b =>
                {
                    b.Property<int>("TeamLeadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamLeadId"), 1L, 1);

                    b.Property<int>("ClientInvolved")
                        .HasColumnType("int")
                        .HasColumnName("ClientInvolved");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DidYouDo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DidYouDo");

                    b.Property<string>("DidYouObserved")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DidYouObserved");

                    b.Property<string>("OfficeToDo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OfficeToDo");

                    b.Property<int>("Rota")
                        .HasColumnType("int")
                        .HasColumnName("Rota");

                    b.Property<int>("StaffInvolved")
                        .HasColumnType("int")
                        .HasColumnName("StaffInvolved");

                    b.Property<int>("StaffStoppedWorking")
                        .HasColumnType("int")
                        .HasColumnName("StaffStoppedWorking");

                    b.HasKey("TeamLeadId");

                    b.HasIndex("ClientInvolved");

                    b.HasIndex("StaffInvolved");

                    b.ToTable("tbl_StaffTeamLead", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffTeamLeadTasks", b =>
                {
                    b.Property<int>("TeamLeadTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamLeadTaskId"), 1L, 1);

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comments");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Status");

                    b.Property<int>("TeamLeadId")
                        .HasColumnType("int")
                        .HasColumnName("TeamLeadId");

                    b.Property<int>("Title")
                        .HasColumnType("int")
                        .HasColumnName("Title");

                    b.HasKey("TeamLeadTaskId");

                    b.HasIndex("TeamLeadId");

                    b.ToTable("tbl_StaffTeamLeadTasks", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffTraining", b =>
                {
                    b.Property<int>("StaffTrainingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffTrainingId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffTrainingId"), 1L, 1);

                    b.Property<string>("Certificate")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)")
                        .HasColumnName("Certificate");

                    b.Property<string>("CertificateAttachment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CertificateAttachment");

                    b.Property<string>("ExpiredDate")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("ExpiredDate");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Location");

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("StartDate");

                    b.Property<string>("Trainer")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)")
                        .HasColumnName("Trainer");

                    b.Property<string>("Training")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Training");

                    b.HasKey("StaffTrainingId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffTraining", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffTrainingMatrix", b =>
                {
                    b.Property<int>("MatrixId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatrixId"), 1L, 1);

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("MatrixId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffTrainingMatrix", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffTrainingMatrixList", b =>
                {
                    b.Property<int>("TrainingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrainingId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<int>("MatrixId")
                        .HasColumnType("int")
                        .HasColumnName("MatrixId");

                    b.HasKey("TrainingId");

                    b.HasIndex("MatrixId");

                    b.ToTable("tbl_StaffTrainingMatrixList", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffWorkTeam", b =>
                {
                    b.Property<int>("StaffWorkTeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffWorkTeamId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffWorkTeamId"), 1L, 1);

                    b.Property<string>("WorkTeam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WorkTeam");

                    b.HasKey("StaffWorkTeamId");

                    b.ToTable("tbl_StaffWorkTeam", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.SupervisionOfficerToAct", b =>
                {
                    b.Property<int>("SupervisionOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupervisionOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupervisionOfficerToActId"), 1L, 1);

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("StaffSupervisionAppraisalId")
                        .HasColumnType("int")
                        .HasColumnName("StaffSupervisionAppraisalId");

                    b.HasKey("SupervisionOfficerToActId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.HasIndex("StaffSupervisionAppraisalId");

                    b.ToTable("tbl_Supervision_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.SupervisionWorkteam", b =>
                {
                    b.Property<int>("SupervisionWorkteamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupervisionWorkteamId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupervisionWorkteamId"), 1L, 1);

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("StaffSupervisionAppraisalId")
                        .HasColumnType("int")
                        .HasColumnName("StaffSupervisionAppraisalId");

                    b.HasKey("SupervisionWorkteamId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.HasIndex("StaffSupervisionAppraisalId");

                    b.ToTable("tbl_Supervision_StaffName", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.SurveyOfficerToAct", b =>
                {
                    b.Property<int>("SurveyOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SurveyOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurveyOfficerToActId"), 1L, 1);

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("StaffSurveyId")
                        .HasColumnType("int")
                        .HasColumnName("StaffSurveyId");

                    b.HasKey("SurveyOfficerToActId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.HasIndex("StaffSurveyId");

                    b.ToTable("tbl_Survey_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.SurveyWorkteam", b =>
                {
                    b.Property<int>("SurveyWorkteamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SurveyWorkteamId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurveyWorkteamId"), 1L, 1);

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("StaffSurveyId")
                        .HasColumnType("int")
                        .HasColumnName("StaffSurveyId");

                    b.HasKey("SurveyWorkteamId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.HasIndex("StaffSurveyId");

                    b.ToTable("tbl_Survey_StaffName", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.TaskBoard", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"), 1L, 1);

                    b.Property<int>("AssignedBy")
                        .HasColumnType("int")
                        .HasColumnName("AssignedBy");

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CompletionDate");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Note");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("TaskImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TaskImage");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TaskName");

                    b.HasKey("TaskId");

                    b.ToTable("tbl_TaskBoard", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.TaskBoardAssignedTo", b =>
                {
                    b.Property<int>("TaskBoardAssignedToId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TaskBoardAssignedToId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskBoardAssignedToId"), 1L, 1);

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("TaskBoardId")
                        .HasColumnType("int")
                        .HasColumnName("TaskBoardId");

                    b.HasKey("TaskBoardAssignedToId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.HasIndex("TaskBoardId");

                    b.ToTable("tbl_TaskBoardAssignedTo", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.TrackingConcernManager", b =>
                {
                    b.Property<int>("TrackingConcernManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TrackingConcernManagerId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrackingConcernManagerId"), 1L, 1);

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("TrackingConcernNoteId")
                        .HasColumnType("int")
                        .HasColumnName("TrackingConcernNoteId");

                    b.HasKey("TrackingConcernManagerId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.HasIndex("TrackingConcernNoteId");

                    b.ToTable("tbl_TrackingConcernManager", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.TrackingConcernNote", b =>
                {
                    b.Property<int>("Ref")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Ref"), 1L, 1);

                    b.Property<string>("ActionRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionRequired");

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<string>("ConcernNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ConcernNote");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("DateOfIncident")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateOfIncident");

                    b.Property<DateTime>("ExpectedDeadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("ExpectedDeadline");

                    b.Property<int>("ManagerCopied")
                        .HasColumnType("int")
                        .HasColumnName("ManagerCopied");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("StaffNotify")
                        .HasColumnType("int")
                        .HasColumnName("StaffNotify");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("Ref");

                    b.ToTable("tbl_TrackingConcernNote", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.TrackingConcernStaff", b =>
                {
                    b.Property<int>("TrackingConcernStaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TrackingConcernManagerId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrackingConcernStaffId"), 1L, 1);

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("TrackingConcernNoteId")
                        .HasColumnType("int")
                        .HasColumnName("TrackingConcernNoteId");

                    b.HasKey("TrackingConcernStaffId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.HasIndex("TrackingConcernNoteId");

                    b.ToTable("tbl_TrackingConcernStaff", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.Untowards", b =>
                {
                    b.Property<int>("UntowardsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UntowardsId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UntowardsId"), 1L, 1);

                    b.Property<string>("ActionRequired")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("ActionRequired");

                    b.Property<string>("ActionStatus")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasColumnName("ActionStatus");

                    b.Property<string>("ActionTaken")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("ActionTaken");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("Date");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("Details");

                    b.Property<string>("EntryHospitalName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("EntryHospitalName");

                    b.Property<string>("ExitHospitalName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ExitHospitalName");

                    b.Property<string>("ExpectedDateAndTimeOfFeedback")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ExpectedDateAndTimeOfFeedback");

                    b.Property<string>("FinalActionToCloseCase")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("FinalActionToCloseCase");

                    b.Property<int>("HomeCareClientId")
                        .HasColumnType("int")
                        .HasColumnName("HomeCareClientId");

                    b.Property<string>("HospitalEntryReason")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("HospitalEntryReason");

                    b.Property<string>("HospitalExitDetails")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("HospitalExitDetails");

                    b.Property<bool>("IsBlackListRequired")
                        .HasColumnType("bit")
                        .HasColumnName("IsBlackListRequired");

                    b.Property<bool>("IsHospitalEntry")
                        .HasColumnType("bit")
                        .HasColumnName("IsHospitalEntry");

                    b.Property<bool>("IsHospitalExit")
                        .HasColumnType("bit")
                        .HasColumnName("IsHospitalExit");

                    b.Property<string>("Others")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("Others");

                    b.Property<string>("PersonReporting")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("PersonReporting");

                    b.Property<string>("PersonReportingEmail")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("PersonReportingEmail");

                    b.Property<string>("PersonReportingTelephone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PersonReportingTelephone");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasColumnName("Priority");

                    b.Property<bool>("ShouldNotifyInvolvingStaff")
                        .HasColumnType("bit")
                        .HasColumnName("ShouldNotifyInvolvingStaff");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("Subject");

                    b.Property<string>("TicketNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TicketNumber");

                    b.Property<string>("TimeOfCall")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("TimeOfCall");

                    b.Property<int>("TypeofRequiredNotification")
                        .HasColumnType("int")
                        .HasColumnName("TypeofRequiredNotification");

                    b.HasKey("UntowardsId");

                    b.ToTable("tbl_Untowards", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.UntowardsOfficerToAct", b =>
                {
                    b.Property<int>("UntowardsOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UntowardsOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UntowardsOfficerToActId"), 1L, 1);

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("UntowardsId")
                        .HasColumnType("int")
                        .HasColumnName("UntowardsId");

                    b.HasKey("UntowardsOfficerToActId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.HasIndex("UntowardsId");

                    b.ToTable("tbl_UntowardsOfficerToAct", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.UntowardsStaffInvolved", b =>
                {
                    b.Property<int>("UntowardsStaffInvolvedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UntowardsStaffInvolvedId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UntowardsStaffInvolvedId"), 1L, 1);

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("UntowardsId")
                        .HasColumnType("int")
                        .HasColumnName("UntowardsId");

                    b.HasKey("UntowardsStaffInvolvedId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.HasIndex("UntowardsId");

                    b.ToTable("tbl_UntowardsStaffInvolved", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.VisitOfficerToAct", b =>
                {
                    b.Property<int>("VisitOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VisitOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitOfficerToActId"), 1L, 1);

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("VisitId")
                        .HasColumnType("int")
                        .HasColumnName("VisitId");

                    b.HasKey("VisitOfficerToActId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.HasIndex("VisitId");

                    b.ToTable("tbl_Visit_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.VisitStaffName", b =>
                {
                    b.Property<int>("VisitStaffNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VisitStaffNameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitStaffNameId"), 1L, 1);

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("VisitId")
                        .HasColumnType("int")
                        .HasColumnName("VisitId");

                    b.HasKey("VisitStaffNameId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.HasIndex("VisitId");

                    b.ToTable("tbl_Visit_StaffName", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.VoiceCallerName", b =>
                {
                    b.Property<int>("VoiceCallerNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VoiceCallerNameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoiceCallerNameId"), 1L, 1);

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("VoiceId")
                        .HasColumnType("int")
                        .HasColumnName("VoiceId");

                    b.HasKey("VoiceCallerNameId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.HasIndex("VoiceId");

                    b.ToTable("tbl_Voice_CallerName", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.VoiceGoodStaff", b =>
                {
                    b.Property<int>("VoiceGoodStaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VoiceGoodStaffId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoiceGoodStaffId"), 1L, 1);

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("VoiceId")
                        .HasColumnType("int")
                        .HasColumnName("VoiceId");

                    b.HasKey("VoiceGoodStaffId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.HasIndex("VoiceId");

                    b.ToTable("tbl_Voice_GoodStaff", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.VoiceOfficerToAct", b =>
                {
                    b.Property<int>("VoiceOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VoiceOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoiceOfficerToActId"), 1L, 1);

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("VoiceId")
                        .HasColumnType("int")
                        .HasColumnName("VoiceId");

                    b.HasKey("VoiceOfficerToActId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.HasIndex("VoiceId");

                    b.ToTable("tbl_Voice_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.VoicePoorStaff", b =>
                {
                    b.Property<int>("VoicePoorStaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VoicePoorStaffId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoicePoorStaffId"), 1L, 1);

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("VoiceId")
                        .HasColumnType("int")
                        .HasColumnName("VoiceId");

                    b.HasKey("VoicePoorStaffId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.HasIndex("VoiceId");

                    b.ToTable("tbl_Voice_PoorStaff", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.WhisttleBlower", b =>
                {
                    b.Property<int>("WhisttleBlowerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WhisttleBlowerId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<string>("Evidence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Evidence");

                    b.Property<string>("Happening")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Happening");

                    b.Property<string>("IncidentDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IncidentDate");

                    b.Property<int>("LikeCalling")
                        .HasColumnType("int")
                        .HasColumnName("LikeCalling");

                    b.Property<string>("StaffName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StaffName");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<int>("UserName")
                        .HasColumnType("int")
                        .HasColumnName("UserName");

                    b.Property<int>("Witness")
                        .HasColumnType("int")
                        .HasColumnName("Witness");

                    b.HasKey("WhisttleBlowerId");

                    b.HasIndex("UserName");

                    b.ToTable("tbl_Whisttle_Blower", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.WoundCareOfficerToAct", b =>
                {
                    b.Property<int>("WoundCareOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WoundCareOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WoundCareOfficerToActId"), 1L, 1);

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("WoundCareId")
                        .HasColumnType("int")
                        .HasColumnName("WoundCareId");

                    b.HasKey("WoundCareOfficerToActId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.HasIndex("WoundCareId");

                    b.ToTable("tbl_WoundCare_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.WoundCarePhysician", b =>
                {
                    b.Property<int>("WoundCarePhysicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WoundCarePhysicianId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WoundCarePhysicianId"), 1L, 1);

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("WoundCareId")
                        .HasColumnType("int")
                        .HasColumnName("WoundCareId");

                    b.HasKey("WoundCarePhysicianId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.HasIndex("WoundCareId");

                    b.ToTable("tbl_WoundCare_Physician", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.WoundCareStaffName", b =>
                {
                    b.Property<int>("WoundCareStaffNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WoundCareStaffNameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WoundCareStaffNameId"), 1L, 1);

                    b.Property<int>("StaffPersonalInfoId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("WoundCareId")
                        .HasColumnType("int")
                        .HasColumnName("WoundCareId");

                    b.HasKey("WoundCareStaffNameId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.HasIndex("WoundCareId");

                    b.ToTable("tbl_WoundCare_StaffName", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.AdlObsOfficerToAct", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffAdlObs", "AdlObs")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("ObservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdlObs");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.AuditTrail", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("AuditTrail")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.Balance", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("Balance")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BaseRecordItemModel", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.BaseRecordModel", "BaseRecord")
                        .WithMany("BaseRecordItems")
                        .HasForeignKey("BaseRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseRecord");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BelieveTask", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.BestInterestAssessment", "BestInterestAssessment")
                        .WithMany("BelieveTask")
                        .HasForeignKey("BestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BestInterestAssessment");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BestInterestAssessment", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("BestInterestAssessment")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BloodCoagOfficerToAct", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientBloodCoagulationRecord", "BloodCoagulation")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("BloodRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodCoagulation");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BloodCoagPhysician", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientBloodCoagulationRecord", "BloodCoagulation")
                        .WithMany("Physician")
                        .HasForeignKey("BloodRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodCoagulation");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BloodCoagStaffName", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientBloodCoagulationRecord", "BloodCoagulation")
                        .WithMany("StaffName")
                        .HasForeignKey("BloodRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodCoagulation");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BloodPressureOfficerToAct", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientBloodPressure", "BloodPressure")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("BloodPressureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodPressure");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BloodPressurePhysician", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientBloodPressure", "BloodPressure")
                        .WithMany("Physician")
                        .HasForeignKey("BloodPressureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodPressure");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BloodPressureStaffName", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientBloodPressure", "BloodPressure")
                        .WithMany("StaffName")
                        .HasForeignKey("BloodPressureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodPressure");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BMIChartOfficerToAct", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientBMIChart", "BMIChart")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("BMIChartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BMIChart");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BMIChartPhysician", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientBMIChart", "BMIChart")
                        .WithMany("Physician")
                        .HasForeignKey("BMIChartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BMIChart");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BMIChartStaffName", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientBMIChart", "BMIChart")
                        .WithMany("StaffName")
                        .HasForeignKey("BMIChartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BMIChart");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BodyTempOfficerToAct", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientBodyTemp", "BodyTemp")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("BodyTempId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BodyTemp");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BodyTempPhysician", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientBodyTemp", "BodyTemp")
                        .WithMany("Physician")
                        .HasForeignKey("BodyTempId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BodyTemp");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BodyTempStaffName", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientBodyTemp", "BodyTemp")
                        .WithMany("StaffName")
                        .HasForeignKey("BodyTempId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BodyTemp");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BowelMovementOfficerToAct", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientBowelMovement", "BowelMovement")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("BowelMovementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BowelMovement");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BowelMovementPhysician", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientBowelMovement", "BowelMovement")
                        .WithMany("Physician")
                        .HasForeignKey("BowelMovementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BowelMovement");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BowelMovementStaffName", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientBowelMovement", "BowelMovement")
                        .WithMany("StaffName")
                        .HasForeignKey("BowelMovementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BowelMovement");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.Capacity", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.PersonalDetail", "PersonalDetail")
                        .WithOne("Capacity")
                        .HasForeignKey("AwesomeCare.Model.Models.Capacity", "PersonalDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalDetail");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.CapacityIndicator", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Capacity", "Capacity")
                        .WithMany("Indicator")
                        .HasForeignKey("CapacityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Capacity");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.CareIssuesTask", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.BestInterestAssessment", "BestInterestAssessment")
                        .WithMany("CareIssuesTask")
                        .HasForeignKey("BestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BestInterestAssessment");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.CareObjPersonToAct", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientCareObj", "ClientCareObj")
                        .WithMany("PersonToAct")
                        .HasForeignKey("CareObjId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientCareObj");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.CarePlanNutrition", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("CarePlanNutrition")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.CareReview", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("CareReview")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientBloodCoagulationRecord", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("ClientBloodCoagulationRecord")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientBloodPressure", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("ClientBloodPressure")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientBMIChart", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("ClientBMIChart")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientBodyTemp", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("ClientBodyTemp")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientBowelMovement", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("ClientBowelMovement")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientCareDetails", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientCareDetailsTask", "ClientCareDetailsTask")
                        .WithMany("ClientCareDetails")
                        .HasForeignKey("ClientCareDetailsTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("ClientCareDetails")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ClientCareDetailsTask");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientCareDetailsTask", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientCareDetailsHeading", "ClientCareDetailsHeading")
                        .WithMany("ClientCareDetailsTasks")
                        .HasForeignKey("ClientCareDetailsHeadingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientCareDetailsHeading");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientCareObj", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("ClientCareObj")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientCleaning", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientNutrition", "ClientNutrition")
                        .WithMany("ClientCleaning")
                        .HasForeignKey("NutritionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("ClientCleaning")
                        .HasForeignKey("STAFFId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ClientNutrition");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientComplainRegister", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("ComplainRegister")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientDailyTask", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("ClientDailyTask")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientEyeHealthMonitoring", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("ClientEyeHealthMonitoring")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientFoodIntake", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("ClientFoodIntake")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientHealthCondition", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("ClientHealthCondition")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientHeartRate", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("ClientHeartRate")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientHobbies", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("ClientHobbies")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientInvolvingParty", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("InvolvingParties")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.ClientInvolvingPartyItem", "ClientInvolvingPartyItem")
                        .WithMany("ClientInvolvingParty")
                        .HasForeignKey("ClientInvolvingPartyItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ClientInvolvingPartyItem");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientLogAudit", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("ClientLogAudit")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", null)
                        .WithMany("ClientLogAudit")
                        .HasForeignKey("StaffPersonalInfoId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientMealDays", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientMealType", "ClientMealType")
                        .WithMany("ClientMeal")
                        .HasForeignKey("ClientMealTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.RotaDayofWeek", "MealDayofWeek")
                        .WithMany("ClientMealDays")
                        .HasForeignKey("MealDayofWeekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.ClientNutrition", "ClientNutrition")
                        .WithMany("ClientMealDays")
                        .HasForeignKey("NutritionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientMealType");

                    b.Navigation("ClientNutrition");

                    b.Navigation("MealDayofWeek");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientMedAudit", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("ClientMedAudit")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", null)
                        .WithMany("ClientMedAudit")
                        .HasForeignKey("StaffPersonalInfoId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientMedication", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("ClientMedication")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.Medication", "Medication")
                        .WithMany()
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.MedicationManufacturer", "MedicationManufacturer")
                        .WithMany()
                        .HasForeignKey("MedicationManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Medication");

                    b.Navigation("MedicationManufacturer");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientMedicationDay", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientMedication", null)
                        .WithMany("ClientMedicationDay")
                        .HasForeignKey("ClientMedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.ClientMedication", "ClientMedication")
                        .WithMany()
                        .HasForeignKey("ClientMedicationId1");

                    b.HasOne("AwesomeCare.Model.Models.RotaDayofWeek", "RotaDayofWeek")
                        .WithOne("ClientMedicationDay")
                        .HasForeignKey("AwesomeCare.Model.Models.ClientMedicationDay", "RotaDayofWeekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientMedication");

                    b.Navigation("RotaDayofWeek");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientMedicationPeriod", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientMedicationDay", "ClientMedicationDay")
                        .WithMany("ClientMedicationPeriod")
                        .HasForeignKey("ClientMedicationDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.ClientRotaType", "ClientRotaType")
                        .WithMany("ClientMedicationPeriod")
                        .HasForeignKey("ClientRotaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientMedicationDay");

                    b.Navigation("ClientRotaType");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientMgtVisit", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("ClientMgtVisit")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", null)
                        .WithMany("ClientMgtVisit")
                        .HasForeignKey("StaffPersonalInfoId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientNutrition", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("ClientNutrition")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "Staff")
                        .WithMany("ClientNutrition")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientOxygenLvl", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("ClientOxygenLvl")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientPainChart", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("ClientPainChart")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientPerformanceIndicatorTask", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientPerformanceIndicator", "ClientPerformanceIndicator")
                        .WithMany("ClientPerformanceIndicatorTask")
                        .HasForeignKey("PerformanceIndicatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientPerformanceIndicator");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientProgram", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("ClientProgram")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", null)
                        .WithMany("ClientProgram")
                        .HasForeignKey("StaffPersonalInfoId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientPulseRate", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("ClientPulseRate")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientRegulatoryContact", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.BaseRecordItemModel", "BaseRecordItem")
                        .WithMany()
                        .HasForeignKey("BaseRecordItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("RegulatoryContact")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseRecordItem");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientRota", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("ClientRota")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.ClientRotaType", "ClientRotaType")
                        .WithMany("ClientRota")
                        .HasForeignKey("ClientRotaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ClientRotaType");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientRotaDays", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientRota", "ClientRota")
                        .WithMany("ClientRotaDays")
                        .HasForeignKey("ClientRotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.RotaDayofWeek", "RotaDayofWeek")
                        .WithMany("ClientRotaDays")
                        .HasForeignKey("RotaDayofWeekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.Rota", "Rota")
                        .WithMany("ClientRotaDays")
                        .HasForeignKey("RotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientRota");

                    b.Navigation("Rota");

                    b.Navigation("RotaDayofWeek");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientRotaTask", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientRotaDays", "ClientRotaDays")
                        .WithMany("ClientRotaTask")
                        .HasForeignKey("ClientRotaDaysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.RotaTask", "RotaTask")
                        .WithMany("ClientRotaTask")
                        .HasForeignKey("RotaTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientRotaDays");

                    b.Navigation("RotaTask");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientSeizure", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("ClientSeizure")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientServiceDetailItem", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientServiceDetail", "ClientServiceDetail")
                        .WithMany("ClientServiceDetailItems")
                        .HasForeignKey("ClientServiceDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientServiceDetail");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientServiceDetailReceipt", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientServiceDetail", "ClientServiceDetail")
                        .WithMany("ClientServiceDetailReceipts")
                        .HasForeignKey("ClientServiceDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientServiceDetail");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientServiceWatch", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("ClientServiceWatch")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", null)
                        .WithMany("ClientServiceWatch")
                        .HasForeignKey("StaffPersonalInfoId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientShopping", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientNutrition", "ClientNutrition")
                        .WithMany("ClientShopping")
                        .HasForeignKey("NutritionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("ClientShopping")
                        .HasForeignKey("STAFFId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ClientNutrition");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientVoice", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("ClientVoice")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", null)
                        .WithMany("ClientVoice")
                        .HasForeignKey("StaffPersonalInfoId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientWoundCare", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("ClientWoundCare")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.CompanyContactModel", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.CompanyModel", "Company")
                        .WithOne("CompanyContact")
                        .HasForeignKey("AwesomeCare.Model.Models.CompanyContactModel", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ComplainOfficerToAct", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientComplainRegister", "ComplainRegister")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("ComplainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComplainRegister");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ComplainStaffName", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientComplainRegister", "ComplainRegister")
                        .WithMany("StaffName")
                        .HasForeignKey("ComplainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComplainRegister");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ConsentCare", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.PersonalDetail", "PersonalDetail")
                        .WithOne("ConsentCare")
                        .HasForeignKey("AwesomeCare.Model.Models.ConsentCare", "PersonalDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalDetail");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ConsentData", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.PersonalDetail", "PersonalDetail")
                        .WithOne("ConsentData")
                        .HasForeignKey("AwesomeCare.Model.Models.ConsentData", "PersonalDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalDetail");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ConsentLandLine", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.PersonalDetail", "PersonalDetail")
                        .WithOne("ConsentLandLine")
                        .HasForeignKey("AwesomeCare.Model.Models.ConsentLandLine", "PersonalDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalDetail");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ConsentLandlineLog", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ConsentLandLine", "ConsentLandLine")
                        .WithMany("LogMethod")
                        .HasForeignKey("LandlineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConsentLandLine");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.CuidiBuddy", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("CuidiBuddy")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.DutyOnCall", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("DutyOnCall")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.DutyOnCallPersonResponsible", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.DutyOnCall", "DutyOnCall")
                        .WithMany("PersonResponsible")
                        .HasForeignKey("DutyOnCallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DutyOnCall");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.DutyOnCallPersonToAct", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.DutyOnCall", "DutyOnCall")
                        .WithMany("PersonToAct")
                        .HasForeignKey("DutyOnCallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DutyOnCall");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.Enotice", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("Enotice")
                        .HasForeignKey("PublishTo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.Equipment", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "Staff")
                        .WithMany("Equipment")
                        .HasForeignKey("PersonToAct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.PersonalDetail", "PersonalDetail")
                        .WithMany("Equipment")
                        .HasForeignKey("PersonalDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalDetail");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.EyeHealthOfficerToAct", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientEyeHealthMonitoring", "EyeHealth")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("EyeHealthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EyeHealth");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.EyeHealthPhysician", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientEyeHealthMonitoring", "EyeHealth")
                        .WithMany("Physician")
                        .HasForeignKey("EyeHealthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EyeHealth");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.EyeHealthStaffName", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientEyeHealthMonitoring", "EyeHealth")
                        .WithMany("StaffName")
                        .HasForeignKey("EyeHealthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EyeHealth");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.FilesAndRecord", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("FilesAndRecord")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("FilesAndRecord")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.FoodIntakeOfficerToAct", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientFoodIntake", "FoodIntake")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("FoodIntakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodIntake");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.FoodIntakePhysician", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientFoodIntake", "FoodIntake")
                        .WithMany("Physician")
                        .HasForeignKey("FoodIntakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodIntake");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.FoodIntakeStaffName", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientFoodIntake", "FoodIntake")
                        .WithMany("StaffName")
                        .HasForeignKey("FoodIntakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodIntake");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.HealthAndLiving", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("HealthAndLiving")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.HealthTask", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.BestInterestAssessment", "BestInterestAssessment")
                        .WithMany("HealthTask")
                        .HasForeignKey("BestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BestInterestAssessment");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.HealthTask2", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.BestInterestAssessment", "BestInterestAssessment")
                        .WithMany("HealthTask2")
                        .HasForeignKey("BestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BestInterestAssessment");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.HeartRateOfficerToAct", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientHeartRate", "HeartRate")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("HeartRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HeartRate");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.HeartRatePhysician", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientHeartRate", "HeartRate")
                        .WithMany("Physician")
                        .HasForeignKey("HeartRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HeartRate");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.HeartRateStaffName", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientHeartRate", "HeartRate")
                        .WithMany("StaffName")
                        .HasForeignKey("HeartRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HeartRate");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.HistoryOfFall", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("HistoryOfFall")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.HomeRiskAssessment", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("HomeRiskAssessment")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.HomeRiskAssessmentTask", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.HomeRiskAssessment", "HomeRiskAssessment")
                        .WithMany("HomeRiskAssessmentTask")
                        .HasForeignKey("HomeRiskAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HomeRiskAssessment");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.HospitalEntry", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("HospitalEntry")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.HospitalEntryPersonToTakeAction", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.HospitalEntry", "HospitalEntry")
                        .WithMany("PersonToTakeAction")
                        .HasForeignKey("HospitalEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("HospitalEntryPersonToTakeAction")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HospitalEntry");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.HospitalEntryStaffInvolved", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.HospitalEntry", "HospitalEntry")
                        .WithMany("StaffInvolved")
                        .HasForeignKey("HospitalEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("HospitalEntryStaffInvolved")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HospitalEntry");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.HospitalExit", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("HospitalExit")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.HospitalExitOfficerToTakeAction", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.HospitalExit", "HospitalExit")
                        .WithMany("OfficerToTakeAction")
                        .HasForeignKey("HospitalExitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("HospitalExitOfficerToTakeAction")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HospitalExit");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.IncidentReporting", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("IncidentReporting")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.IncomingMeds", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("IncomingMeds")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.InfectionControl", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("InfectionControl")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.Interest", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.InterestAndObjective", "InterestAndObjective")
                        .WithMany("Interest")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InterestAndObjective");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.InterestAndObjective", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("InterestAndObjective")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.InvestigationAttachment", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Investigation", "Investigation")
                        .WithMany("InvestigationAttachments")
                        .HasForeignKey("InvestigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Investigation");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.KeyIndicatorLog", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.KeyIndicators", "KeyIndicators")
                        .WithMany("LogMethod")
                        .HasForeignKey("KeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KeyIndicators");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.KeyIndicators", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.PersonalDetail", "PersonalDetail")
                        .WithOne("KeyIndicators")
                        .HasForeignKey("AwesomeCare.Model.Models.KeyIndicators", "PersonalDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalDetail");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.KeyWorkerOfficerToAct", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffKeyWorkerVoice", "KeyWorker")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("KeyWorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KeyWorker");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.KeyWorkerWorkteam", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffKeyWorkerVoice", "KeyWorker")
                        .WithMany("Workteam")
                        .HasForeignKey("KeyWorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KeyWorker");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.LogAuditOfficerToAct", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientLogAudit", "LogAudit")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("LogAuditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogAudit");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ManagingTasks", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("ManagingTasks")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.MedAuditOfficerToAct", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientMedAudit", "MedAudit")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("MedAuditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedAudit");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.MedAuditStaffName", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientMedAudit", "MedAudit")
                        .WithMany("StaffName")
                        .HasForeignKey("MedAuditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedAudit");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.MedCompOfficerToAct", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffMedComp", "MedComp")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("MedCompId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedComp");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.OfficeAttendance", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.OneToOneOfficerToAct", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffOneToOne", "OneToOne")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("OneToOneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OneToOne");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.OxygenLvlOfficerToAct", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientOxygenLvl", "OxygenLvl")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("OxygenLvlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OxygenLvl");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.OxygenLvlPhysician", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientOxygenLvl", "OxygenLvl")
                        .WithMany("Physician")
                        .HasForeignKey("OxygenLvlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OxygenLvl");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.OxygenLvlStaffName", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientOxygenLvl", "OxygenLvl")
                        .WithMany("StaffName")
                        .HasForeignKey("OxygenLvlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OxygenLvl");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.PainChartOfficerToAct", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientPainChart", "PainChart")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("PainChartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PainChart");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.PainChartPhysician", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientPainChart", "PainChart")
                        .WithMany("Physician")
                        .HasForeignKey("PainChartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PainChart");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.PainChartStaffName", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientPainChart", "PainChart")
                        .WithMany("StaffName")
                        .HasForeignKey("PainChartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PainChart");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.PerformanceIndicatorTask", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.PerformanceIndicator", "PerformanceIndicator")
                        .WithMany("PerformanceIndicatorTask")
                        .HasForeignKey("PerformanceIndicatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PerformanceIndicator");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.Personal", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.PersonalDetail", "PersonalDetail")
                        .WithOne("Personal")
                        .HasForeignKey("AwesomeCare.Model.Models.Personal", "PersonalDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalDetail");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.PersonalDetail", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("PersonalDetail")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.PersonalHygiene", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("PersonalHygiene")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.PersonalityTest", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.InterestAndObjective", "InterestAndObjective")
                        .WithMany("PersonalityTest")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InterestAndObjective");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.PersonCentred", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.PersonalDetail", "PersonalDetail")
                        .WithMany("PersonCentred")
                        .HasForeignKey("PersonalDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalDetail");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.PersonCentredFocus", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.PersonCentred", "PersonCentre")
                        .WithMany("Focus")
                        .HasForeignKey("PersonCentredId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonCentre");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.Pets", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("Pets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.PhysicalAbility", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("PhysicalAbility")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ProgramOfficerToAct", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientProgram", "Program")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.PulseRateOfficerToAct", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientPulseRate", "PulseRate")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("PulseRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PulseRate");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.PulseRatePhysician", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientPulseRate", "PulseRate")
                        .WithMany("Physician")
                        .HasForeignKey("PulseRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PulseRate");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.PulseRateStaffName", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientPulseRate", "PulseRate")
                        .WithMany("StaffName")
                        .HasForeignKey("PulseRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PulseRate");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.Resources", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("Resources")
                        .HasForeignKey("PublishTo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.Review", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.PersonalDetail", "PersonalDetail")
                        .WithOne("Review")
                        .HasForeignKey("AwesomeCare.Model.Models.Review", "PersonalDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalDetail");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.SalaryAllowance", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("SalaryAllowance")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.SalaryDeduction", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("SalaryDeduction")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.SeizureOfficerToAct", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientSeizure", "Seizure")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("SeizureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seizure");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.SeizurePhysician", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientSeizure", "Seizure")
                        .WithMany("Physician")
                        .HasForeignKey("SeizureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seizure");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.SeizureStaffName", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientSeizure", "Seizure")
                        .WithMany("StaffName")
                        .HasForeignKey("SeizureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seizure");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ServiceOfficerToAct", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientServiceWatch", "Service")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ServiceStaffName", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientServiceWatch", "Service")
                        .WithMany("StaffName")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.SetupStaffHoliday", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("SetupStaffHoliday")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ShiftBookingBlockedDays", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ShiftBooking", "ShiftBooking")
                        .WithMany("ShiftBookingBlockedDays")
                        .HasForeignKey("ShiftBookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShiftBooking");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.SpecialHealthAndMedication", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("SpecialHealthAndMedication")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.SpecialHealthCondition", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("SpecialHealthCondition")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.SpotCheckOfficerToAct", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffSpotCheck", "SpotCheck")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("SpotCheckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SpotCheck");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffAdlObs", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("StaffAdlObs")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "Staff")
                        .WithMany("StaffAdlObs")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffBlackList", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("StaffBlackList")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("StaffBlackList")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffCompetenceTest", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("StaffCompetenceTest")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffCompetenceTestTask", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffCompetenceTest", "StaffCompetenceTest")
                        .WithMany("StaffCompetenceTestTask")
                        .HasForeignKey("StaffCompetenceTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffCompetenceTest");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffEducation", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "Staff")
                        .WithMany("Education")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffEmergencyContact", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("EmergencyContacts")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffHealth", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("StaffHealth")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffHealthTask", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffHealth", "StaffHealth")
                        .WithMany("StaffHealthTask")
                        .HasForeignKey("StaffHealthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffHealth");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffHoliday", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("StaffHoliday")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffInfectionControl", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("StaffInfectionControl")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffInterview", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("StaffInterview")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffInterviewTask", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffInterview", "StaffInterview")
                        .WithMany("StaffInterviewTask")
                        .HasForeignKey("StaffInterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffInterview");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffKeyWorkerVoice", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("StaffKeyWorkerVoice")
                        .HasForeignKey("ServicesRequiresServices")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "Staff")
                        .WithMany("StaffKeyWorkerVoice")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffMedComp", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("StaffMedCompObs")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "Staff")
                        .WithMany("StaffMedCompObs")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffMedRota", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Rota", "Rota")
                        .WithMany()
                        .HasForeignKey("RotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rota");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffOfficeLocation", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.OfficeLocation", "OfficeLocation")
                        .WithMany("StaffOfficeLocation")
                        .HasForeignKey("Location")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("StaffOfficeLocation")
                        .HasForeignKey("Staff")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OfficeLocation");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffOneToOne", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "Staff")
                        .WithMany("StaffOneToOne")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffPersonalInfo", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("StaffPersonalInfo")
                        .HasForeignKey("AwesomeCare.Model.Models.StaffPersonalInfo", "ApplicationUserId");

                    b.HasOne("AwesomeCare.Model.Models.StaffWorkTeam", "StaffWorkTeam")
                        .WithMany("StaffPersonalInfo")
                        .HasForeignKey("StaffWorkTeamId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("StaffWorkTeam");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffPersonalInfoComment", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("StaffPersonalInfoComments")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffPersonalityTest", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("StaffPersonalityTest")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffRating", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("StaffRating")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffReferee", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "Staff")
                        .WithMany("References")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffReference", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("StaffReference")
                        .HasForeignKey("ApplicantRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "Staff")
                        .WithMany("StaffReference")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffRegulatoryContact", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.BaseRecordItemModel", "BaseRecordItem")
                        .WithMany()
                        .HasForeignKey("BaseRecordItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("RegulatoryContact")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseRecordItem");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffRota", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Rota", "Rota")
                        .WithMany("StaffRota")
                        .HasForeignKey("RotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rota");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffRotaItem", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffRota", "StaffRota")
                        .WithMany("StaffRotaItem")
                        .HasForeignKey("StaffRotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffRota");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffRotaPartner", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffRota", "StaffRota")
                        .WithMany("StaffRotaPartners")
                        .HasForeignKey("StaffRotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffRota");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffRotaPeriod", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ClientRotaType", "ClientRotaType")
                        .WithMany("StaffRotaPeriods")
                        .HasForeignKey("ClientRotaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffRota", "StaffRota")
                        .WithMany("StaffRotaPeriods")
                        .HasForeignKey("StaffRotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientRotaType");

                    b.Navigation("StaffRota");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffRotaTask", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffRotaPeriod", "StaffRotaPeriod")
                        .WithMany("StaffRotaTasks")
                        .HasForeignKey("StaffRotaPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffRotaPeriod");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffShadowing", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("StaffShadowing")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffShadowingTask", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffShadowing", "StaffShadowing")
                        .WithMany("StaffShadowingTask")
                        .HasForeignKey("StaffShadowingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffShadowing");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffShiftBooking", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Rota", null)
                        .WithMany("ShiftBookings")
                        .HasForeignKey("RotaId");

                    b.HasOne("AwesomeCare.Model.Models.ShiftBooking", "ShiftBooking")
                        .WithMany("StaffShiftBooking")
                        .HasForeignKey("ShiftBookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("ShiftBookings")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShiftBooking");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffShiftBookingDay", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffShiftBooking", "ShiftBooking")
                        .WithMany("Days")
                        .HasForeignKey("StaffShiftBookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShiftBooking");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffSpotCheck", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("StaffSpotCheck")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "Staff")
                        .WithMany("StaffSpotCheck")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffSupervisionAppraisal", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "Staff")
                        .WithMany("StaffSupervisionAppraisal")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffSurvey", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "Staff")
                        .WithMany("StaffSurvey")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffTax", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("StaffTax")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffTeamLead", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("StaffTeamLead")
                        .HasForeignKey("ClientInvolved")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("StaffTeamLead")
                        .HasForeignKey("StaffInvolved")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffTeamLeadTasks", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffTeamLead", "StaffTeamLead")
                        .WithMany("StaffTeamLeadTasks")
                        .HasForeignKey("TeamLeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffTeamLead");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffTraining", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "Staff")
                        .WithMany("Trainings")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffTrainingMatrix", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("StaffTrainingMatrix")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffTrainingMatrixList", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffTrainingMatrix", "StaffTrainingMatrix")
                        .WithMany("StaffTrainingMatrixList")
                        .HasForeignKey("MatrixId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffTrainingMatrix");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.SupervisionOfficerToAct", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffSupervisionAppraisal", "Supervision")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("StaffSupervisionAppraisalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");

                    b.Navigation("Supervision");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.SupervisionWorkteam", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffSupervisionAppraisal", "Supervision")
                        .WithMany("Workteam")
                        .HasForeignKey("StaffSupervisionAppraisalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");

                    b.Navigation("Supervision");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.SurveyOfficerToAct", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffSurvey", "Survey")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("StaffSurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.SurveyWorkteam", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.StaffSurvey", "Survey")
                        .WithMany("Workteam")
                        .HasForeignKey("StaffSurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.TaskBoardAssignedTo", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.TaskBoard", "TaskBoard")
                        .WithMany("AssignedTo")
                        .HasForeignKey("TaskBoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");

                    b.Navigation("TaskBoard");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.TrackingConcernManager", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.TrackingConcernNote", "TrackingConcernNote")
                        .WithMany("ManagerInvolved")
                        .HasForeignKey("TrackingConcernNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");

                    b.Navigation("TrackingConcernNote");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.TrackingConcernStaff", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.TrackingConcernNote", "TrackingConcernNote")
                        .WithMany("StaffInvolved")
                        .HasForeignKey("TrackingConcernNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");

                    b.Navigation("TrackingConcernNote");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.UntowardsOfficerToAct", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.Untowards", "Untowards")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("UntowardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");

                    b.Navigation("Untowards");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.UntowardsStaffInvolved", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.Untowards", "Untowards")
                        .WithMany("StaffInvolved")
                        .HasForeignKey("UntowardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");

                    b.Navigation("Untowards");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.VisitOfficerToAct", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.ClientMgtVisit", "Visit")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.VisitStaffName", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.ClientMgtVisit", "Visit")
                        .WithMany("StaffName")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.VoiceCallerName", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.ClientVoice", "Voice")
                        .WithMany("CallerName")
                        .HasForeignKey("VoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");

                    b.Navigation("Voice");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.VoiceGoodStaff", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.ClientVoice", "Voice")
                        .WithMany("GoodStaff")
                        .HasForeignKey("VoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");

                    b.Navigation("Voice");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.VoiceOfficerToAct", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.ClientVoice", "Voice")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("VoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");

                    b.Navigation("Voice");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.VoicePoorStaff", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.ClientVoice", "Voice")
                        .WithMany("PoorStaff")
                        .HasForeignKey("VoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");

                    b.Navigation("Voice");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.WhisttleBlower", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.Client", "Client")
                        .WithMany("WhisttleBlower")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.WoundCareOfficerToAct", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.ClientWoundCare", "WoundCare")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("WoundCareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");

                    b.Navigation("WoundCare");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.WoundCarePhysician", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.ClientWoundCare", "WoundCare")
                        .WithMany("Physician")
                        .HasForeignKey("WoundCareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");

                    b.Navigation("WoundCare");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.WoundCareStaffName", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.ClientWoundCare", "WoundCare")
                        .WithMany("StaffName")
                        .HasForeignKey("WoundCareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");

                    b.Navigation("WoundCare");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeCare.Model.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AwesomeCare.Model.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ApplicationUser", b =>
                {
                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BaseRecordModel", b =>
                {
                    b.Navigation("BaseRecordItems");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.BestInterestAssessment", b =>
                {
                    b.Navigation("BelieveTask");

                    b.Navigation("CareIssuesTask");

                    b.Navigation("HealthTask");

                    b.Navigation("HealthTask2");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.Capacity", b =>
                {
                    b.Navigation("Indicator");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.Client", b =>
                {
                    b.Navigation("AuditTrail");

                    b.Navigation("Balance");

                    b.Navigation("BestInterestAssessment");

                    b.Navigation("CarePlanNutrition");

                    b.Navigation("CareReview");

                    b.Navigation("ClientBMIChart");

                    b.Navigation("ClientBloodCoagulationRecord");

                    b.Navigation("ClientBloodPressure");

                    b.Navigation("ClientBodyTemp");

                    b.Navigation("ClientBowelMovement");

                    b.Navigation("ClientCareDetails");

                    b.Navigation("ClientCareObj");

                    b.Navigation("ClientDailyTask");

                    b.Navigation("ClientEyeHealthMonitoring");

                    b.Navigation("ClientFoodIntake");

                    b.Navigation("ClientHealthCondition");

                    b.Navigation("ClientHeartRate");

                    b.Navigation("ClientHobbies");

                    b.Navigation("ClientLogAudit");

                    b.Navigation("ClientMedAudit");

                    b.Navigation("ClientMedication");

                    b.Navigation("ClientMgtVisit");

                    b.Navigation("ClientNutrition");

                    b.Navigation("ClientOxygenLvl");

                    b.Navigation("ClientPainChart");

                    b.Navigation("ClientProgram");

                    b.Navigation("ClientPulseRate");

                    b.Navigation("ClientRota");

                    b.Navigation("ClientSeizure");

                    b.Navigation("ClientServiceWatch");

                    b.Navigation("ClientVoice");

                    b.Navigation("ClientWoundCare");

                    b.Navigation("ComplainRegister");

                    b.Navigation("CuidiBuddy");

                    b.Navigation("DutyOnCall");

                    b.Navigation("Enotice");

                    b.Navigation("FilesAndRecord");

                    b.Navigation("HealthAndLiving");

                    b.Navigation("HistoryOfFall");

                    b.Navigation("HomeRiskAssessment");

                    b.Navigation("HospitalEntry");

                    b.Navigation("HospitalExit");

                    b.Navigation("IncidentReporting");

                    b.Navigation("IncomingMeds");

                    b.Navigation("InfectionControl");

                    b.Navigation("InterestAndObjective");

                    b.Navigation("InvolvingParties");

                    b.Navigation("ManagingTasks");

                    b.Navigation("PersonalDetail");

                    b.Navigation("PersonalHygiene");

                    b.Navigation("Pets");

                    b.Navigation("PhysicalAbility");

                    b.Navigation("RegulatoryContact");

                    b.Navigation("Resources");

                    b.Navigation("SpecialHealthAndMedication");

                    b.Navigation("SpecialHealthCondition");

                    b.Navigation("StaffAdlObs");

                    b.Navigation("StaffBlackList");

                    b.Navigation("StaffKeyWorkerVoice");

                    b.Navigation("StaffMedCompObs");

                    b.Navigation("StaffReference");

                    b.Navigation("StaffSpotCheck");

                    b.Navigation("StaffTeamLead");

                    b.Navigation("WhisttleBlower");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientBloodCoagulationRecord", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("Physician");

                    b.Navigation("StaffName");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientBloodPressure", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("Physician");

                    b.Navigation("StaffName");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientBMIChart", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("Physician");

                    b.Navigation("StaffName");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientBodyTemp", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("Physician");

                    b.Navigation("StaffName");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientBowelMovement", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("Physician");

                    b.Navigation("StaffName");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientCareDetailsHeading", b =>
                {
                    b.Navigation("ClientCareDetailsTasks");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientCareDetailsTask", b =>
                {
                    b.Navigation("ClientCareDetails");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientCareObj", b =>
                {
                    b.Navigation("PersonToAct");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientComplainRegister", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("StaffName");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientEyeHealthMonitoring", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("Physician");

                    b.Navigation("StaffName");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientFoodIntake", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("Physician");

                    b.Navigation("StaffName");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientHeartRate", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("Physician");

                    b.Navigation("StaffName");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientInvolvingPartyItem", b =>
                {
                    b.Navigation("ClientInvolvingParty");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientLogAudit", b =>
                {
                    b.Navigation("OfficerToAct");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientMealType", b =>
                {
                    b.Navigation("ClientMeal");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientMedAudit", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("StaffName");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientMedication", b =>
                {
                    b.Navigation("ClientMedicationDay");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientMedicationDay", b =>
                {
                    b.Navigation("ClientMedicationPeriod");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientMgtVisit", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("StaffName");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientNutrition", b =>
                {
                    b.Navigation("ClientCleaning");

                    b.Navigation("ClientMealDays");

                    b.Navigation("ClientShopping");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientOxygenLvl", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("Physician");

                    b.Navigation("StaffName");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientPainChart", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("Physician");

                    b.Navigation("StaffName");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientPerformanceIndicator", b =>
                {
                    b.Navigation("ClientPerformanceIndicatorTask");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientProgram", b =>
                {
                    b.Navigation("OfficerToAct");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientPulseRate", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("Physician");

                    b.Navigation("StaffName");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientRota", b =>
                {
                    b.Navigation("ClientRotaDays");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientRotaDays", b =>
                {
                    b.Navigation("ClientRotaTask");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientRotaType", b =>
                {
                    b.Navigation("ClientMedicationPeriod");

                    b.Navigation("ClientRota");

                    b.Navigation("StaffRotaPeriods");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientSeizure", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("Physician");

                    b.Navigation("StaffName");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientServiceDetail", b =>
                {
                    b.Navigation("ClientServiceDetailItems");

                    b.Navigation("ClientServiceDetailReceipts");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientServiceWatch", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("StaffName");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientVoice", b =>
                {
                    b.Navigation("CallerName");

                    b.Navigation("GoodStaff");

                    b.Navigation("OfficerToAct");

                    b.Navigation("PoorStaff");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ClientWoundCare", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("Physician");

                    b.Navigation("StaffName");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.CompanyModel", b =>
                {
                    b.Navigation("CompanyContact");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ConsentLandLine", b =>
                {
                    b.Navigation("LogMethod");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.DutyOnCall", b =>
                {
                    b.Navigation("PersonResponsible");

                    b.Navigation("PersonToAct");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.HomeRiskAssessment", b =>
                {
                    b.Navigation("HomeRiskAssessmentTask");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.HospitalEntry", b =>
                {
                    b.Navigation("PersonToTakeAction");

                    b.Navigation("StaffInvolved");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.HospitalExit", b =>
                {
                    b.Navigation("OfficerToTakeAction");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.InterestAndObjective", b =>
                {
                    b.Navigation("Interest");

                    b.Navigation("PersonalityTest");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.Investigation", b =>
                {
                    b.Navigation("InvestigationAttachments");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.KeyIndicators", b =>
                {
                    b.Navigation("LogMethod");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.OfficeLocation", b =>
                {
                    b.Navigation("StaffOfficeLocation");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.PerformanceIndicator", b =>
                {
                    b.Navigation("PerformanceIndicatorTask");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.PersonalDetail", b =>
                {
                    b.Navigation("Capacity");

                    b.Navigation("ConsentCare");

                    b.Navigation("ConsentData");

                    b.Navigation("ConsentLandLine");

                    b.Navigation("Equipment");

                    b.Navigation("KeyIndicators");

                    b.Navigation("PersonCentred");

                    b.Navigation("Personal");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.PersonCentred", b =>
                {
                    b.Navigation("Focus");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.Rota", b =>
                {
                    b.Navigation("ClientRotaDays");

                    b.Navigation("ShiftBookings");

                    b.Navigation("StaffRota");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.RotaDayofWeek", b =>
                {
                    b.Navigation("ClientMealDays");

                    b.Navigation("ClientMedicationDay");

                    b.Navigation("ClientRotaDays");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.RotaTask", b =>
                {
                    b.Navigation("ClientRotaTask");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.ShiftBooking", b =>
                {
                    b.Navigation("ShiftBookingBlockedDays");

                    b.Navigation("StaffShiftBooking");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffAdlObs", b =>
                {
                    b.Navigation("OfficerToAct");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffCompetenceTest", b =>
                {
                    b.Navigation("StaffCompetenceTestTask");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffHealth", b =>
                {
                    b.Navigation("StaffHealthTask");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffInterview", b =>
                {
                    b.Navigation("StaffInterviewTask");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffKeyWorkerVoice", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("Workteam");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffMedComp", b =>
                {
                    b.Navigation("OfficerToAct");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffOneToOne", b =>
                {
                    b.Navigation("OfficerToAct");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffPersonalInfo", b =>
                {
                    b.Navigation("ClientCleaning");

                    b.Navigation("ClientLogAudit");

                    b.Navigation("ClientMedAudit");

                    b.Navigation("ClientMgtVisit");

                    b.Navigation("ClientNutrition");

                    b.Navigation("ClientProgram");

                    b.Navigation("ClientServiceWatch");

                    b.Navigation("ClientShopping");

                    b.Navigation("ClientVoice");

                    b.Navigation("Education");

                    b.Navigation("EmergencyContacts");

                    b.Navigation("Equipment");

                    b.Navigation("FilesAndRecord");

                    b.Navigation("HospitalEntryPersonToTakeAction");

                    b.Navigation("HospitalEntryStaffInvolved");

                    b.Navigation("HospitalExitOfficerToTakeAction");

                    b.Navigation("References");

                    b.Navigation("RegulatoryContact");

                    b.Navigation("SalaryAllowance");

                    b.Navigation("SalaryDeduction");

                    b.Navigation("SetupStaffHoliday");

                    b.Navigation("ShiftBookings");

                    b.Navigation("StaffAdlObs");

                    b.Navigation("StaffBlackList");

                    b.Navigation("StaffCompetenceTest");

                    b.Navigation("StaffHealth");

                    b.Navigation("StaffHoliday");

                    b.Navigation("StaffInfectionControl");

                    b.Navigation("StaffInterview");

                    b.Navigation("StaffKeyWorkerVoice");

                    b.Navigation("StaffMedCompObs");

                    b.Navigation("StaffOfficeLocation");

                    b.Navigation("StaffOneToOne");

                    b.Navigation("StaffPersonalInfoComments");

                    b.Navigation("StaffPersonalityTest");

                    b.Navigation("StaffRating");

                    b.Navigation("StaffReference");

                    b.Navigation("StaffShadowing");

                    b.Navigation("StaffSpotCheck");

                    b.Navigation("StaffSupervisionAppraisal");

                    b.Navigation("StaffSurvey");

                    b.Navigation("StaffTax");

                    b.Navigation("StaffTeamLead");

                    b.Navigation("StaffTrainingMatrix");

                    b.Navigation("Trainings");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffRota", b =>
                {
                    b.Navigation("StaffRotaItem");

                    b.Navigation("StaffRotaPartners");

                    b.Navigation("StaffRotaPeriods");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffRotaPeriod", b =>
                {
                    b.Navigation("StaffRotaTasks");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffShadowing", b =>
                {
                    b.Navigation("StaffShadowingTask");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffShiftBooking", b =>
                {
                    b.Navigation("Days");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffSpotCheck", b =>
                {
                    b.Navigation("OfficerToAct");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffSupervisionAppraisal", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("Workteam");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffSurvey", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("Workteam");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffTeamLead", b =>
                {
                    b.Navigation("StaffTeamLeadTasks");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffTrainingMatrix", b =>
                {
                    b.Navigation("StaffTrainingMatrixList");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.StaffWorkTeam", b =>
                {
                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.TaskBoard", b =>
                {
                    b.Navigation("AssignedTo");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.TrackingConcernNote", b =>
                {
                    b.Navigation("ManagerInvolved");

                    b.Navigation("StaffInvolved");
                });

            modelBuilder.Entity("AwesomeCare.Model.Models.Untowards", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("StaffInvolved");
                });
#pragma warning restore 612, 618
        }
    }
}
